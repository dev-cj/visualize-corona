{"version":3,"sources":["components/singleCountryChart.js","redux/actions/actionTypes.js","components/drawer.js","components/visualize.js","components/helper.js","components/Maps.js","components/desktopVisualizerLeft.js","App.js","serviceWorker.js","redux/reducer/visualizeReducer.js","redux/reducer/plotReducer.js","redux/reducer/singleCountryReducer.js","redux/reducer/mapDataReducer.js","redux/reducer/statsDataReducer.js","redux/reducer/index.js","redux/store.js","index.js"],"names":["CountryChart","dispatch","useDispatch","countries","useSelector","state","visualizeData","useState","Object","keys","sort","countryArr","singleCountryData","singleCountryPlot","setSingleCountryPlot","currentCountry","country","currentType","type","dateDiff","xaxisDateDiff","CRD","scatterType","apply","setApply","useEffect","console","log","payload","term","length","update","plot","data","layout","title","xaxis","frames","config","getKey","cases","deaths","recovered","active","new_confirmed","new_deaths","new_recovered","date","colors","includes","forEach","el","xaxisDate","yAxisData","x","y","name","marker","color","push","dtick","automargin","text","standoff","autorange","rangeselector","buttons","count","label","step","stepmode","rangeslider","range","pieDateSingle","dateArr","values","labels","markers","arr","dateIndex","indexOf","val","pop","texttemplate","textinfo","textposition","modifySingleCountry","optionsArray","Menu","closeOnSelect","mt","as","Button","variantColor","size","minWidth","maxHeight","overflowY","MenuOption","onChange","value","reverse","defaultValue","map","key","toLowerCase","position","el_lowercase","arg","split","setScatter","Text","NumberInput","placeholder","Box","Alert","status","border","selected","moment","defaultFormat","toDate","undefined","dateFormat","format","minDate","dateRange","maxDate","includeDates","placeholderText","DrawerOption","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","option","setoption","ref","pos","bottom","left","onClick","zIndex","leftIcon","Drawer","placement","isFullHeight","flexDirection","display","alignItems","justifyContent","Select","e","target","switchOption","variant","mr","fetchData","url","a","api","axios","get","response","message","Graph","plotData","plotReducer","countryData","addData","getData","then","obj","new_api_func","keys_arr","countryObj","timelineArr","timelineObj","dataByDate","d","width","bg","Spinner","thickness","speed","emptyColor","barmode","autosize","window","innerWidth","height","innerHeight","displayModeBar","displaylogo","scrollZoom","responsive","useResizeHandler","style","toImageButtonOptions","scale","mapEffect","geoData","Array","isArray","countriesObj","geoJson","features","countryInfo","lat","lng","long","properties","geometry","coordinates","Maps","mapData","updateData","asyncfun","className","Map","center","zoom","maxZoom","minZoom","TileLayer","attribution","prop","Date","updated","lastUpdated","fromNow","Marker","icon","L","iconUrl","iconSize","Popup","flexDir","Image","alignSelf","src","flag","alt","fontSize","marginY","Badge","todayCases","casesPerOneMillion","DesktopVisualizerLeft","timelineData","stats","timeline","dataStateGlobal","setdataStateGlobal","MapLeftDiv","h","latestGlobalData","boxARDStyle","confirmed","percentage","commaSepNo","num","toLocaleString","useGrouping","p","borderWidth","rounded","mb","fontWeight","paddingX","Progress","roundedLeft","roundedRight","Global","backgroundColor","ChartLeftDiv","App","activeComp","setActiveComp","ThemeProvider","CSSReset","flexWrap","textAlign","paddingY","href","Boolean","location","hostname","match","initialState","visualizeReducer","action","images","source","xref","yref","sizex","sizey","opacity","layer","pieDateType","singleCountryReducer","mapDataReducer","statsDataReducer","combineReducers","middleWare","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bf347d6b.chunk.js","sourcesContent":["import {\n  Alert,\n  AlertIcon,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuDivider,\n  MenuOptionGroup,\n  MenuItemOption,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Text,\n  Box,\n} from '@chakra-ui/core'\nimport React, { useState, useEffect, Fragment } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\nimport moment from 'moment'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst CountryChart = () => {\n  const dispatch = useDispatch()\n  const countries = useSelector((state) => state.visualizeData)\n  const [countryArr] = useState(Object.keys(countries).sort())\n  const singleCountryData = useSelector((state) => state.singleCountryData)\n\n  const [singleCountryPlot, setSingleCountryPlot] = useState({})\n  const currentCountry = singleCountryData.country\n  const currentType = singleCountryData.type\n  const dateDiff = singleCountryData.xaxisDateDiff\n  const CRD = singleCountryData.CRD\n  const scatterType = singleCountryData.scatterType\n  const [apply, setApply] = useState(false)\n  const modifySingleCountry = (term) => {\n    if (term === 'CRD') {\n      if (CRD.length) {\n        console.log('waaaaaaaah')\n        let update = false\n        const plot = {\n          data: [],\n          layout: {\n            title: currentCountry + ' ' + currentType + ' chart',\n            xaxis: {},\n          },\n          frames: [],\n          config: {},\n        }\n        const getKey = {\n          cases: 'confirmed',\n          deaths: 'deaths',\n          recovered: 'recovered',\n          active: 'active',\n          new_confirmed: 'new_confirmed',\n          new_deaths: 'new_deaths',\n          new_recovered: 'new_recovered',\n          date: 'date',\n        }\n        const colors = {\n          cases: '#E33427',\n          deaths: '#5A0924',\n          recovered: '#09D32C',\n          active: '#10AAC0',\n          new_confirmed: '#3E08E0',\n          new_deaths: '#78BBD9',\n          new_recovered: '#98AAC0',\n        }\n\n        if (['scatter', 'bar'].includes(currentType)) {\n          CRD.forEach((el) => {\n            const xaxisDate = countries[currentCountry]['timeline']['date']\n            const yAxisData = countries[currentCountry]['timeline'][getKey[el]]\n            const data = {\n              type: currentType,\n              x: xaxisDate,\n              y: yAxisData,\n              name: el,\n              marker: {\n                color: colors[el],\n              },\n            }\n\n            if (currentType === 'scatter') {\n              data['mode'] = scatterType[el] ? scatterType[el] : 'lines'\n            }\n            plot.data.push(data)\n            update = true\n          })\n          plot.layout.xaxis = {\n            dtick: singleCountryData.xaxisDateDiff * 86400000,\n            automargin: true,\n            title: {\n              text: 'Timeline',\n              standoff: 5,\n            },\n            autorange: true,\n            rangeselector: {\n              buttons: [\n                {\n                  count: 1,\n                  label: '1m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                {\n                  count: 3,\n                  label: '3m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                {\n                  count: 6,\n                  label: '6m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                { step: 'all' },\n              ],\n            },\n            rangeslider: { range: [] },\n            type: 'date',\n          }\n        }\n        if (currentType === 'pie') {\n          const pieDateSingle = singleCountryData.pieDateSingle\n          if (CRD.length && pieDateSingle) {\n            const dateArr = countries[currentCountry]['timeline']['date']\n            const values = []\n            const labels = []\n            const markers = []\n            CRD.forEach((el) => {\n              const arr = countries[currentCountry]['timeline'][getKey[el]]\n              const dateIndex = dateArr.indexOf(pieDateSingle)\n              const val = pieDateSingle ? arr[dateIndex] : arr.pop()\n              values.push(val)\n              labels.push(el)\n              markers.push(colors[el])\n            })\n            const data = {\n              type: currentType,\n              values: values,\n              labels: labels,\n              marker: {\n                colors: markers,\n              },\n              texttemplate: '%{label}: %{value} (%{percent})',\n              textinfo: 'label+percent',\n              textposition: 'outside',\n              automargin: true,\n            }\n            plot.data.push(data)\n            plot.layout.title =\n              plot.layout.title +\n              ' as on ' +\n              (pieDateSingle ? pieDateSingle : dateArr.pop())\n            update = true\n          }\n        }\n        if (update) setSingleCountryPlot(plot)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (singleCountryData.country && apply) {\n      console.log('sing c and apply')\n      dispatch({ type: actionTypes.SET_PLOT, payload: singleCountryPlot })\n      setApply(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [singleCountryPlot])\n  useEffect(() => {\n    console.log('modify useeffect')\n    modifySingleCountry('CRD')\n    setApply(true)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [singleCountryData])\n  const setScatter = (arg) => {\n    const arr = arg.split('-')\n    dispatch({\n      type: actionTypes.SET_singleCountry_scatterType,\n      payload: { ...scatterType, [arr[0]]: arr[1] },\n    })\n  }\n  const optionsArray = ['Cases', 'Deaths', 'Recovered', 'Active']\n  return (\n    <>\n      <Menu closeOnSelect={true}>\n        <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n          Select country\n        </MenuButton>\n        <MenuList minWidth='240px' maxHeight='70vh' overflowY='scroll'>\n          <MenuOptionGroup\n            title='Country'\n            type='radio'\n            onChange={(value) => {\n              dispatch({ type: actionTypes.SET_singleCountry, payload: value })\n              dispatch({\n                type: actionTypes.SET_singleCountry_dateRange,\n                payload: Object.keys(\n                  countries[value]['timeline']['dataByDate']\n                ).reverse(),\n              })\n            }}\n            defaultValue={currentCountry}\n          >\n            {countryArr.map((el) => {\n              return (\n                <MenuItemOption key={el} value={el}>\n                  {el}\n                </MenuItemOption>\n              )\n            })}\n          </MenuOptionGroup>\n        </MenuList>\n      </Menu>\n      {currentCountry ? (\n        <>\n          <Menu closeOnSelect={true}>\n            <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n              Select type\n            </MenuButton>\n            <MenuList minWidth='240px'>\n              <MenuOptionGroup\n                title='type'\n                type='radio'\n                onChange={(value) =>\n                  dispatch({\n                    type: actionTypes.SET_singleCountry_type,\n                    payload: value,\n                  })\n                }\n                defaultValue={currentType}\n              >\n                {['Bar', 'Scatter', 'Pie'].map((el) => {\n                  return (\n                    <MenuItemOption\n                      key={el.toLowerCase()}\n                      value={el.toLowerCase()}\n                    >\n                      {el}\n                    </MenuItemOption>\n                  )\n                })}\n              </MenuOptionGroup>\n            </MenuList>\n          </Menu>\n          {currentType ? (\n            <>\n              <Menu closeOnSelect={false}>\n                <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n                  Add to graph\n                </MenuButton>\n                <MenuList minWidth='240px'>\n                  <MenuOptionGroup\n                    title='Select one or more'\n                    type='checkbox'\n                    onChange={(value) =>\n                      dispatch({\n                        type: actionTypes.SET_singleCountry_CRD,\n                        payload: value,\n                      })\n                    }\n                    defaultValue={CRD}\n                  >\n                    {optionsArray.map((el) => {\n                      return (\n                        <MenuItemOption\n                          key={el.toLowerCase()}\n                          value={el.toLowerCase()}\n                        >\n                          {el}\n                        </MenuItemOption>\n                      )\n                    })}\n                  </MenuOptionGroup>\n                </MenuList>\n              </Menu>\n              {currentType === 'scatter' && CRD.length ? (\n                <Menu closeOnSelect={false}>\n                  <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n                    Modes\n                  </MenuButton>\n                  <MenuList minWidth='240px' position='relative'>\n                    {optionsArray.map((el) => {\n                      const el_lowercase = el.toLowerCase()\n                      return CRD.includes(el_lowercase) ? (\n                        <Fragment key={el + 'modeFragment'}>\n                          <MenuOptionGroup\n                            key={el + 'modes'}\n                            title={el}\n                            type='radio'\n                            defaultValue={\n                              el_lowercase + '-' + scatterType[el_lowercase]\n                            }\n                            onChange={(value) => setScatter(value)}\n                          >\n                            <MenuItemOption\n                              key={el_lowercase + '-markers'}\n                              value={el_lowercase + '-markers'}\n                            >\n                              Markers\n                            </MenuItemOption>\n                            <MenuItemOption\n                              key={el_lowercase + '-lines'}\n                              value={el_lowercase + '-lines'}\n                            >\n                              Lines\n                            </MenuItemOption>\n                            <MenuItemOption\n                              key={el_lowercase + '-lines+markers'}\n                              value={el_lowercase + '-lines+markers'}\n                            >\n                              Lines + Markers\n                            </MenuItemOption>\n                          </MenuOptionGroup>\n                          <MenuDivider key={el + 'divider'} />\n                        </Fragment>\n                      ) : null\n                    })}\n                  </MenuList>\n                </Menu>\n              ) : null}\n              {['bar', 'scatter'].includes(currentType) && CRD.length ? (\n                <>\n                  <Text color='gray.500' mt={2}>\n                    Select spacing between date on xaxis\n                  </Text>\n                  <NumberInput\n                    mt={2}\n                    defaultValue={dateDiff}\n                    onChange={(value) =>\n                      dispatch({\n                        type: actionTypes.SET_singleCountry_xaxisDateDiff,\n                        payload: value,\n                      })\n                    }\n                  >\n                    <NumberInputField type='number' placeholder='Default' />{' '}\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </>\n              ) : null}\n              {currentType === 'pie' && CRD.length ? (\n                <>\n                  <Box mt={2}>\n                    {!singleCountryData.pieDateSingle ? (\n                      <Alert status='info'>\n                        <AlertIcon />\n                        Select a date below\n                      </Alert>\n                    ) : null}\n\n                    <Box border='2px'>\n                      <DatePicker\n                        {...(singleCountryData.pieDateSingle\n                          ? {\n                              selected: moment(\n                                singleCountryData.pieDateSingle,\n                                moment.defaultFormat\n                              ).toDate(),\n                            }\n                          : undefined)}\n                        dateFormat='dd/MM/yyyy'\n                        onChange={(date) =>\n                          dispatch({\n                            type: actionTypes.SET_singleCountry_pieDateSingle,\n                            payload: moment(date).format('YYYY-MM-DD'),\n                          })\n                        }\n                        minDate={moment(\n                          singleCountryData.dateRange[0],\n                          moment.defaultFormat\n                        ).toDate()}\n                        maxDate={moment(\n                          singleCountryData.dateRange[\n                            singleCountryData.dateRange.length - 1\n                          ],\n                          moment.defaultFormat\n                        ).toDate()}\n                        includeDates={singleCountryData.dateRange.map((el) =>\n                          moment(el, moment.defaultFormat).toDate()\n                        )}\n                        placeholderText='Select a date'\n                      />\n                    </Box>\n                  </Box>\n                </>\n              ) : null}\n            </>\n          ) : null}\n        </>\n      ) : null}\n    </>\n  )\n}\n\nexport default CountryChart\n","export const SET_DATA = 'SET_API_DATA'\n\nexport const SET_PLOT = 'SET_PLOT'\n\nexport const SET_SingleCountryData = 'SET_SingleCountryData'\nexport const SET_singleCountry = 'SET_SINGLE_COUNTRY'\n\nexport const SET_singleCountry_type = 'SET_SINGLE_COUNTRY_TYPE'\n\nexport const SET_singleCountry_CRD = 'SET_SINGLE_COUNTRY_CRD'\n\nexport const SET_singleCountry_scatterType = 'SET_SINGLE_COUNTRY_scatterType'\n\nexport const SET_singleCountry_pieDateSingle =\n  'SET_SINGLE_COUNTRY_pieDateSingle'\n\nexport const SET_singleCountry_dateRange = 'SET_SINGLE_COUNTRY_dateRange'\n\nexport const SET_singleCountry_xaxisDateDiff =\n  'SET_SINGLE_COUNTRY_xaxisDateDiff'\n\nexport const SET_MAP_DATA = 'SET_MAP_DATA'\n\nexport const SET_STATS_TIMELINE = 'SET_STATS_TIMELINE'\n\nexport const SET_STATS_COUNTRIES = 'SET_STATS_COUNTRIES'\n","import {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  // DrawerCloseButton,\n  Button,\n  Select,\n  useDisclosure,\n  Box,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/core'\n\nimport React, { useState } from 'react'\nimport CountryChart from './singleCountryChart'\n\nconst DrawerOption = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  const [option, setoption] = useState('')\n\n  const switchOption = (value) => {\n    switch (value) {\n      case 'country-chart':\n        return (\n          <>\n            <CountryChart key='country-chart' />\n          </>\n        )\n      case 'compare-countries':\n        return (\n          <Alert status='info' mt={2}>\n            <AlertIcon />\n            Compare Countries feature is coming soon!\n          </Alert>\n        )\n      default:\n        return\n    }\n  }\n\n  return (\n    <>\n      <Button\n        ref={btnRef}\n        pos='absolute'\n        bottom='10%'\n        left='1%'\n        variantColor='teal'\n        onClick={onOpen}\n        zIndex={100}\n        key='menu-button'\n        leftIcon='edit'\n      >\n        Create\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement='left'\n        onClose={onClose}\n        isFullHeight={true}\n        key='drawer-content'\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>Create your chart</DrawerHeader>\n          <DrawerBody>\n            <Box\n              flexDirection='column'\n              display='flex'\n              alignItems='baseline'\n              justifyContent='space-between'\n            >\n              <Select\n                placeholder='Select option'\n                onChange={(e) => setoption(e.target.value)}\n                defaultValue={option}\n              >\n                <option value='country-chart'>Country Chart</option>\n                <option value='compare-countries'>Compare Countries</option>\n              </Select>\n              {switchOption(option)}\n            </Box>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant='outline' mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n\nexport default DrawerOption\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Spinner, Box } from '@chakra-ui/core'\nimport DrawerOption from './drawer'\nimport Plot from 'react-plotly.js'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\nasync function fetchData(url) {\n  const historical = 'https://corona.lmao.ninja/v2/historical?lastdays=all'\n  const corona_api = 'https://corona-api.com/countries?include=timeline'\n  try {\n    const api = url === 'old' ? historical : corona_api\n    let response = await axios.get(api)\n    // console.log(response.data);\n    return response.data\n  } catch (e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e)\n    return\n  }\n}\n\nexport default function Graph() {\n  const dispatch = useDispatch()\n  const plotData = useSelector((state) => state.plotReducer.plotData)\n  const [countryData, addData] = useState(\n    useSelector((state) => state.visualizeData)\n  )\n  const getData = async () => {\n    const data = await fetchData('new').then((data) => data)\n    // await console.log(data)\n    let obj = {}\n    // const old_api_func = () => {\n    //   data.forEach((el) => {\n    //     let country = el.country\n    //     let province = el.province\n    //     let timeline = el.timeline\n    //     if (province) {\n    //       // console.log('province :', country, province, obj)\n    //       obj[country] = { ...obj[country] }\n    //       obj[country]['province'] = { ...obj[country]['province'] }\n\n    //       obj[country]['province'][province] = { province, timeline }\n    //     } else obj[country] = timeline\n    //   })\n    // }\n    const new_api_func = () => {\n      data.data.forEach((el) => {\n        let country = el.name\n        let keys_arr = Object.keys(el)\n        let countryObj = {}\n        keys_arr.forEach((key) => {\n          if (key === 'timeline') {\n            let timelineArr = el[key]\n            let timelineObj = {}\n            const dataByDate = {}\n            let keys = timelineArr[1] ? Object.keys(timelineArr[1]) : null\n            if (keys)\n              keys.forEach((key) => {\n                timelineObj[key] = timelineArr\n                  .map((obj) => {\n                    if (key === 'date') {\n                      dataByDate[obj.date] = obj\n                    }\n                    return obj[key]\n                  })\n                  .reverse()\n              })\n            timelineObj['dataByDate'] = dataByDate\n            countryObj[key] = timelineObj\n          } else countryObj[key] = el[key]\n        })\n        obj[country] = { ...countryObj }\n      })\n    }\n    await new_api_func()\n    await addData(obj)\n    dispatch({ type: actionTypes.SET_DATA, payload: obj })\n  }\n\n  useEffect(() => {\n    if (!Object.keys(countryData).length) getData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <>\n      {Object.keys(countryData).length ? (\n        <DrawerOption key='drawer-option' />\n      ) : (\n        <Box\n          d='flex'\n          alignItems='center'\n          justifyContent='center'\n          width='100%'\n          bg='#9AE6B4'\n        >\n          'Fetching Data'\n          <Spinner\n            thickness='4px'\n            speed='0.65s'\n            emptyColor='gray.200'\n            color='blue.500'\n            size='xl'\n          />\n        </Box>\n      )}\n      <Plot\n        data={plotData.data}\n        layout={{\n          ...plotData.layout,\n          type: 'date',\n          barmode: 'group',\n          autosize: true,\n          width: window.innerWidth * 0.75,\n          height: window.innerHeight * 0.96,\n          // margin: {\n          //   l: 50,\n          //   r: 50,\n          //   b: 100,\n          //   t: 100,\n          //   pad: 4,\n          // },\n        }}\n        // frames={this.state.frames}\n        config={{\n          ...plotData.config,\n          displayModeBar: true,\n          displaylogo: false,\n          scrollZoom: true,\n          responsive: true,\n          useResizeHandler: true,\n          style: { width: '100%', height: '100%' },\n          toImageButtonOptions: {\n            format: 'jpeg',\n            scale: 3,\n          },\n        }}\n        // onInitialized={figure => this.setState(figure)}\n        // onUpdate={figure => this.setState(figure)}\n      />\n    </>\n  )\n}\n","import axios from 'axios'\n\nasync function mapEffect() {\n  let response\n\n  try {\n    response = await axios.get('https://corona.lmao.ninja/v2/countries')\n    return response.data\n  } catch (e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e)\n    return\n  }\n}\n\nexport const geoData = async () => {\n  const data = await mapEffect().then((data) => {\n    return data\n  })\n\n  const hasData = Array.isArray(data) && data.length > 0\n\n  if (!hasData) return\n  const countriesObj = {}\n  data.map((el) => (countriesObj[el['country']] = el))\n\n  const geoJson = {\n    type: 'FeatureCollection',\n    features: data.map((country) => {\n      const { countryInfo = {} } = country\n      const { lat, long: lng } = countryInfo\n      return {\n        type: 'Feature',\n        properties: {\n          ...country,\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat],\n        },\n      }\n    }),\n  }\n\n  return { geoJson, countriesObj }\n}\n","import React, { useState, useEffect } from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport L from 'leaflet'\nimport moment from 'moment'\nimport { geoData } from './helper'\nimport { Box, Image, Text, Badge } from '@chakra-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\n// import { useToast, Box, Button } from '@chakra-ui/core'\nconst icon = (url) =>\n  new L.icon({\n    iconUrl: 'https://img.icons8.com/color/96/000000/marker.png',\n    iconSize: [25, 25],\n  })\nconst Maps = () => {\n  const dispatch = useDispatch()\n  const [data, updateData] = useState(useSelector((state) => state.mapData))\n\n  // const [pop, activePop] = useState(null);\n  const asyncfun = async () => {\n    return await geoData().then((data) => data)\n  }\n  const position = [51.505, -0.09]\n  const dataMap = () => {\n    asyncfun().then((data) => {\n      updateData(data.geoJson)\n      dispatch({ type: actionTypes.SET_MAP_DATA, payload: data.geoJson })\n      dispatch({\n        type: actionTypes.SET_STATS_COUNTRIES,\n        payload: data.countriesObj,\n      })\n    })\n  }\n  useEffect(() => {\n    if (!Object.keys(data).length) dataMap()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const marker = (prop) => {\n    // deathsPerOneMillion: 0\n    // tests: 6395\n    // testsPerOneMillion: 430\n    // todayDeaths: 0\n    const properties = prop.properties\n    const date = new Date(properties.updated)\n    let lastUpdated = moment(date).fromNow()\n    return (\n      <Marker\n        icon={icon()}\n        key={properties.country}\n        position={[...prop.geometry.coordinates].reverse()}\n      >\n        <Popup>\n          <Box\n            d='flex'\n            flexDir='column'\n            justifyContent='space-evenly'\n            height='auto'\n            width={200}\n          >\n            <Image\n              mt='0'\n              alignSelf='center'\n              src={properties.countryInfo.flag}\n              alt='country flag'\n              height='auto'\n              width='50%'\n              // style={{ height: 'auto', width: '50%' }}\n            />\n            <Text mt='4%' fontSize='lg'>\n              {properties.country}\n            </Text>\n            <Box d='flex' alignItems='center' flexDir='column'>\n              <Text fontSize='md' marginY='0'>\n                Total Cases : {properties.cases}\n              </Text>\n              <Badge\n                variantColor='purple'\n                variant='solid'\n                fontSize='md'\n                marginY='3'\n              >\n                +{properties.todayCases}\n              </Badge>\n              <Text fontSize='sm'> Active : {properties.active} </Text>\n              <Text fontSize='sm'> Recovered : {properties.recovered} </Text>\n              <Text fontSize='sm'> Deaths : {properties.deaths} </Text>\n              <Text fontSize='sm'>\n                Cases Per Million : {properties.casesPerOneMillion}\n              </Text>\n              <Text fontSize='sm'> Updated {lastUpdated} </Text>\n            </Box>\n          </Box>\n        </Popup>\n      </Marker>\n    )\n  }\n\n  const map = (\n    <>\n      <div className='map'>\n        <Map center={position} zoom={4} maxZoom={15} minZoom={3}>\n          <TileLayer\n            // url='https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png'\n            // attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n            url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          {Object.keys(data).length\n            ? data.features.map((el) => marker(el))\n            : console.log('data not fetched or markers not working')}\n        </Map>\n      </div>\n    </>\n  )\n  return map\n}\nexport default Maps\n","import React, { useEffect, useState } from 'react'\nimport { Box, Text, Progress, Badge } from '@chakra-ui/core'\nimport axios from 'axios'\nimport { useSelector, useDispatch } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\nconst DesktopVisualizerLeft = (prop) => {\n  const active = prop.active\n  const timelineData = useSelector((state) => state.stats.timeline)\n  const dispatch = useDispatch()\n  const [dataStateGlobal, setdataStateGlobal] = useState(false)\n  const getData = async () => {\n    const api = 'https://corona-api.com/timeline'\n    try {\n      let response = await axios.get(api).then((data) => data.data.data)\n      await dispatch({\n        type: actionTypes.SET_STATS_TIMELINE,\n        payload: response,\n      })\n      await setdataStateGlobal(true)\n    } catch (e) {\n      console.log(`Failed to fetch countries: ${e.message}`, e)\n      return\n    }\n  }\n  useEffect(() => {\n    if (Object.keys(timelineData)) getData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  const FetchingData = () => (\n    <Box\n      d='flex'\n      height='20%'\n      width='full'\n      justifyContent='center'\n      alignItems='center'\n      backgroundColor='gray.500'\n    >\n      Fetching Data\n    </Box>\n  )\n  const Global = () => {\n    const latestGlobalData = timelineData[0]\n    const boxARDStyle = {\n      d: 'flex',\n      flexDir: 'row',\n      justifyContent: 'space-between',\n      mt: '1%',\n      alignItems: 'center',\n    }\n    const confirmed = latestGlobalData.confirmed\n    const active = latestGlobalData.active\n    const recovered = latestGlobalData.recovered\n    const deaths = latestGlobalData.deaths\n\n    const percentage = {\n      active: (active / confirmed) * 100 + '%',\n      recovered: (recovered / confirmed) * 100 + '%',\n      deaths: (deaths / confirmed) * 100 + '%',\n    }\n    const commaSepNo = (num) =>\n      num.toLocaleString('en', {\n        useGrouping: true,\n      })\n    console.log(latestGlobalData, percentage)\n    return (\n      <Box width='100%' bg='#fff' p='3%'>\n        <Box borderWidth='1px' rounded='md' p='2%'>\n          <Box d='flex' alignItems='flex-start' flexDir='column'>\n            <Text color='gray.600' fontSize='xl' mb='2%' fontWeight='bold'>\n              Worldwide\n            </Text>\n            <Text color='gray.500' fontSize='md'>\n              Total Confirmed Cases\n            </Text>\n            <Text color='black' fontSize='2xl' mb='2%' fontWeight='semibold'>\n              {commaSepNo(confirmed)}\n            </Text>\n          </Box>\n          <Box d='flex' paddingX='2px'>\n            <Progress\n              color='blue'\n              size='sm'\n              value={100}\n              width={percentage.active}\n              roundedLeft='md'\n            />\n            <Progress\n              color='green'\n              size='sm'\n              value={100}\n              width={percentage.recovered}\n            />\n            <Progress\n              color='red'\n              size='sm'\n              value={100}\n              width={percentage.deaths}\n              roundedRight='md'\n            />\n          </Box>\n          <Box d='flex' flexDir='column' justifyContent='space-evenly'>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='blue' fontSize='0.8em'>\n                Active Cases\n              </Badge>\n              <Text color='black' fontSize='md'>\n                {commaSepNo(active)}\n              </Text>\n            </Box>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='green' fontSize='0.8em'>\n                Recovered\n              </Badge>\n              <Text color='black' fontSize='md'>\n                {commaSepNo(recovered)}\n              </Text>\n            </Box>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='red' fontSize='0.8em'>\n                Deaths\n              </Badge>\n              <Text color='black' fontSize='md'>\n                {commaSepNo(deaths)}\n              </Text>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    )\n  }\n  const MapLeftDiv = (\n    <Box d='flex' flexDir='column' h='100%'>\n      {dataStateGlobal ? Global() : FetchingData()}\n    </Box>\n  )\n  const ChartLeftDiv = <Box>Chart</Box>\n  return active === 'map' ? MapLeftDiv : ChartLeftDiv\n}\n\nexport default DesktopVisualizerLeft\n","import React, { useState } from 'react'\nimport './styles.css'\nimport Graph from './components/visualize'\nimport Maps from './components/Maps'\nimport DesktopVisualizerLeft from './components/desktopVisualizerLeft'\nimport { ThemeProvider, CSSReset, Box, Button } from '@chakra-ui/core'\n\nconst App = () => {\n  const [activeComp, setActiveComp] = useState('map')\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Box height='100vh'>\n        <Box d='flex' height='96%'>\n          <Box d='flex' width='100%' height='100%'>\n            <Box\n              d='flex'\n              flexDir='column'\n              flexWrap='nowrap'\n              width='25%'\n              height='100%'\n              bg='#fff'\n              // justifyContent='flex-start'\n              // alignItems='center'\n            >\n              <Box textAlign='center' fontSize='2em' bg='#ff4'>\n                Corona Stats\n              </Box>\n              <DesktopVisualizerLeft active={activeComp} />\n              <Box\n                // bg='#ba35f2'\n                d='flex'\n                mt='auto'\n                height='auto'\n                paddingY='2px'\n                width='full'\n                justifyContent='center'\n              >\n                {activeComp === 'map' ? (\n                  <Button\n                    variantColor='pink'\n                    variant='solid'\n                    onClick={() => setActiveComp('graph')}\n                  >\n                    Visualize\n                  </Button>\n                ) : (\n                  <Button\n                    variantColor='teal'\n                    variant='solid'\n                    onClick={() => setActiveComp('map')}\n                  >\n                    Map\n                  </Button>\n                )}\n              </Box>\n            </Box>\n            <Box width='75%' height='100%' bg='#445894'>\n              {activeComp === 'map' ? <Maps /> : <Graph />}\n            </Box>\n          </Box>\n        </Box>\n        <div className='info-box'>\n          <div className='footnote'>\n            <a href='https://devcj.in'>\n              Built By <span className='highlight'>CJ</span>\n            </a>\n          </div>\n        </div>\n      </Box>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {}\n\nconst visualizeReducer = (state = initialState, action) => {\n  // console.log(state, action)\n  switch (action.type) {\n    case actionTypes.SET_DATA: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    default:\n      return state\n  }\n}\nexport default visualizeReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {\n  plotData: {\n    data: [\n      {\n        type: 'bar',\n        x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June'],\n        y: [2, 5, 6, 15, 4, 2],\n      },\n      {\n        type: 'bar',\n        x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June'],\n        y: [2, 5, 3, 2, 20, 7],\n      },\n    ],\n    layout: {\n      autosize: true,\n      title: '<b style=\"font-size:1.2em;\">A Sample Plot</b>',\n      barmode: 'group',\n      xaxis: {},\n    },\n    frames: [],\n    config: {},\n  },\n}\n\nconst plotReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_PLOT: {\n      return {\n        plotData: {\n          ...action.payload,\n          layout: {\n            ...action.payload.layout,\n            images: [\n              {\n                name: 'watermark_CJ',\n                source: 'https://devcj.in/images/logo.png',\n                xref: 'paper',\n                yref: 'paper',\n                x: 0,\n                y: 0.9,\n                sizex: 0.1,\n                sizey: 0.1,\n                opacity: 0.1,\n                layer: 'below',\n              },\n            ],\n          },\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\nexport default plotReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {\n  country: '',\n  type: '',\n  CRD: [],\n  scatterType: {},\n  pieDateType: 'single',\n  pieDateSingle: '',\n  xaxisDateDiff: 0,\n  dateRange: [],\n}\n\nconst singleCountryReducer = (state = initialState, action) => {\n  //   console.log(state, action)\n  switch (action.type) {\n    case actionTypes.SET_SingleCountryData: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry: {\n      return {\n        ...state,\n        country: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_type: {\n      return {\n        ...state,\n        type: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_CRD: {\n      return {\n        ...state,\n        CRD: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_scatterType: {\n      return {\n        ...state,\n        scatterType: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_pieDateSingle: {\n      return {\n        ...state,\n        pieDateSingle: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_dateRange: {\n      return {\n        ...state,\n        dateRange: action.payload,\n      }\n    }\n\n    case actionTypes.SET_singleCountry_xaxisDateDiff: {\n      return {\n        ...state,\n        xaxisDateDiff: action.payload,\n      }\n    }\n    default:\n      return state\n  }\n}\nexport default singleCountryReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {}\n\nconst mapDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_MAP_DATA: {\n      return action.payload\n    }\n\n    default:\n      return state\n  }\n}\nexport default mapDataReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = { timeline: {}, countries: {} }\n\nconst statsDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_STATS_TIMELINE: {\n      return { ...state, timeline: { ...action.payload } }\n    }\n    case actionTypes.SET_STATS_COUNTRIES: {\n      return { ...state, countries: { ...action.payload } }\n    }\n    default:\n      return state\n  }\n}\nexport default statsDataReducer\n","import { combineReducers } from 'redux'\nimport visualizeReducer from './visualizeReducer'\nimport plotReducer from './plotReducer'\nimport singleCountryReducer from './singleCountryReducer'\nimport mapDataReducer from './mapDataReducer'\nimport statsDataReducer from './statsDataReducer'\nexport default combineReducers({\n  visualizeData: visualizeReducer,\n  plotReducer,\n  singleCountryData: singleCountryReducer,\n  mapData: mapDataReducer,\n  stats: statsDataReducer,\n})\n","import { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducer/'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst middleWare = [thunk]\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(...middleWare))\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}