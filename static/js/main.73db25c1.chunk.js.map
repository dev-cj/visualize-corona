{"version":3,"sources":["components/visualize.js","redux/actions/actionTypes.js","components/helper.js","components/Maps.js","components/desktopVisualizerLeft.js","components/singleCountryChart.js","components/drawer.js","App.js","serviceWorker.js","redux/reducer/visualizeReducer.js","redux/reducer/plotReducer.js","redux/reducer/singleCountryReducer.js","redux/reducer/mapDataReducer.js","redux/reducer/statsDataReducer.js","redux/reducer/index.js","redux/store.js","index.js"],"names":["fetchData","url","a","api","axios","get","response","data","console","log","message","Graph","dispatch","useDispatch","plotData","useSelector","state","plotReducer","useState","visualizeData","countryData","addData","getData","then","obj","new_api_func","forEach","el","country","name","keys_arr","Object","keys","countryObj","key","timelineArr","timelineObj","dataByDate","map","date","reverse","type","payload","useEffect","length","Box","d","alignItems","justifyContent","width","bg","Spinner","thickness","speed","emptyColor","color","size","layout","barmode","autosize","window","innerWidth","height","innerHeight","config","displayModeBar","displaylogo","scrollZoom","responsive","useResizeHandler","style","toImageButtonOptions","format","scale","flexDir","Image","rounded","src","Text","as","mt","fontSize","fontWeight","lineHeight","mapEffect","geoData","Array","isArray","countriesObj","geoJson","features","countryInfo","lat","lng","long","properties","geometry","coordinates","Maps","mapData","updateData","asyncfun","className","Map","center","zoom","maxZoom","minZoom","TileLayer","attribution","prop","Date","updated","lastUpdated","moment","fromNow","Marker","icon","L","iconUrl","iconSize","position","Popup","alignSelf","flag","alt","marginY","cases","Badge","variantColor","variant","todayCases","active","recovered","deaths","casesPerOneMillion","marker","DesktopVisualizerLeft","timelineData","stats","timeline","countries","currentCountry","setCurrentCountry","dataStateGlobal","setdataStateGlobal","Global","latestGlobalData","boxARDStyle","confirmed","percentage","commaSepNo","num","toLocaleString","useGrouping","borderWidth","p","mb","paddingX","Progress","value","roundedLeft","roundedRight","Icon","new_confirmed","new_recovered","new_deaths","toFixed","CountryWise","CountryList","w","Menu","closeOnSelect","Button","minWidth","maxHeight","overflowY","placement","MenuOption","title","onChange","defaultValue","SingleCountry","singleCountryData","tests","testsPerOneMillion","h","pt","backgroundColor","CountryChart","sort","countryArr","singleCountryPlot","setSingleCountryPlot","currentType","dateDiff","xaxisDateDiff","CRD","scatterType","apply","setApply","term","update","plot","xaxis","frames","getKey","colors","includes","xaxisDate","yAxisData","x","y","push","dtick","automargin","text","standoff","autorange","rangeselector","buttons","count","label","step","stepmode","rangeslider","range","pieDateSingle","dateArr","values","labels","markers","arr","dateIndex","indexOf","val","pop","texttemplate","textinfo","textposition","modifySingleCountry","optionsArray","zIndex","toLowerCase","el_lowercase","arg","split","setScatter","NumberInput","placeholder","Alert","status","border","selected","defaultFormat","toDate","undefined","dateFormat","minDate","dateRange","maxDate","includeDates","placeholderText","DrawerOption","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","option","setoption","ref","onClick","leftIcon","Drawer","isFullHeight","flexDirection","display","Select","e","target","switchOption","mr","App","activeComp","setActiveComp","ThemeProvider","CSSReset","flexWrap","textAlign","href","rel","Boolean","location","hostname","match","initialState","visualizeReducer","action","images","source","xref","yref","sizex","sizey","opacity","layer","pieDateType","singleCountryReducer","mapDataReducer","statsDataReducer","combineReducers","middleWare","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.73db25c1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Spinner, Box, Text, Image } from '@chakra-ui/core'\n// import DrawerOption from './drawer'\nimport Plot from 'react-plotly.js'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\nasync function fetchData(url) {\n  const historical = 'https://corona.lmao.ninja/v2/historical?lastdays=all'\n  const corona_api = 'https://corona-api.com/countries?include=timeline'\n  try {\n    const api = url === 'old' ? historical : corona_api\n    let response = await axios.get(api)\n    // console.log(response.data);\n    return response.data\n  } catch (e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e)\n    return\n  }\n}\n\nexport default function Graph() {\n  const dispatch = useDispatch()\n  const plotData = useSelector((state) => state.plotReducer.plotData)\n  const [countryData, addData] = useState(\n    useSelector((state) => state.visualizeData)\n  )\n  const getData = async () => {\n    const data = await fetchData('new').then((data) => data)\n    // await console.log(data)\n    let obj = {}\n    // const old_api_func = () => {\n    //   data.forEach((el) => {\n    //     let country = el.country\n    //     let province = el.province\n    //     let timeline = el.timeline\n    //     if (province) {\n    //       // console.log('province :', country, province, obj)\n    //       obj[country] = { ...obj[country] }\n    //       obj[country]['province'] = { ...obj[country]['province'] }\n\n    //       obj[country]['province'][province] = { province, timeline }\n    //     } else obj[country] = timeline\n    //   })\n    // }\n    const new_api_func = () => {\n      data.data.forEach((el) => {\n        let country = el.name\n        let keys_arr = Object.keys(el)\n        let countryObj = {}\n        keys_arr.forEach((key) => {\n          if (key === 'timeline') {\n            let timelineArr = el[key]\n            let timelineObj = {}\n            const dataByDate = {}\n            let keys = timelineArr[1] ? Object.keys(timelineArr[1]) : null\n            if (keys)\n              keys.forEach((key) => {\n                timelineObj[key] = timelineArr\n                  .map((obj) => {\n                    if (key === 'date') {\n                      dataByDate[obj.date] = obj\n                    }\n                    return obj[key]\n                  })\n                  .reverse()\n              })\n            timelineObj['dataByDate'] = dataByDate\n            countryObj[key] = timelineObj\n          } else countryObj[key] = el[key]\n        })\n        obj[country] = { ...countryObj }\n      })\n    }\n    await new_api_func()\n    await addData(obj)\n    dispatch({ type: actionTypes.SET_DATA, payload: obj })\n  }\n\n  useEffect(() => {\n    if (!Object.keys(countryData).length) getData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <>\n      {Object.keys(countryData).length ? (\n        <Box d={['None', 'initial']}></Box>\n      ) : (\n        <Box\n          d='flex'\n          alignItems='center'\n          justifyContent='center'\n          width='100%'\n          bg='#9AE6B4'\n        >\n          'Fetching Data'\n          <Spinner\n            thickness='4px'\n            speed='0.65s'\n            emptyColor='gray.200'\n            color='blue.500'\n            size='xl'\n          />\n        </Box>\n      )}\n      <Box d={['None', 'initial']}>\n        <Plot\n          data={plotData.data}\n          layout={{\n            ...plotData.layout,\n            type: 'date',\n            barmode: 'group',\n            autosize: true,\n            width: window.innerWidth * 0.75,\n            height: window.innerHeight * 0.96,\n            // margin: {\n            //   l: 50,\n            //   r: 50,\n            //   b: 100,\n            //   t: 100,\n            //   pad: 4,\n            // },\n          }}\n          // frames={this.state.frames}\n          config={{\n            ...plotData.config,\n            displayModeBar: true,\n            displaylogo: false,\n            scrollZoom: true,\n            responsive: true,\n            useResizeHandler: true,\n            style: { width: '100%', height: '100%' },\n            toImageButtonOptions: {\n              format: 'jpeg',\n              scale: 3,\n            },\n          }}\n          // onInitialized={figure => this.setState(figure)}\n          // onUpdate={figure => this.setState(figure)}\n        />\n      </Box>\n      <Box d={['initial', 'None']}>\n        <Box\n          d='flex'\n          flexDir='column'\n          alignItems='center'\n          justifyContent='center'\n        >\n          <Image\n            rounded='md'\n            src='https://raw.githubusercontent.com/dev-cj/visualize-corona/master/src/chartsExample.png'\n          />\n          <Text as='sup'>(Image of desktop view)</Text>\n          <Text mt={2} fontSize='xl' fontWeight='semibold' lineHeight='short'>\n            To visualize and download charts use this website on a Desktop\n          </Text>\n        </Box>\n      </Box>\n    </>\n  )\n}\n","export const SET_DATA = 'SET_API_DATA'\n\nexport const SET_PLOT = 'SET_PLOT'\n\nexport const SET_SingleCountryData = 'SET_SingleCountryData'\nexport const SET_singleCountry = 'SET_SINGLE_COUNTRY'\n\nexport const SET_singleCountry_type = 'SET_SINGLE_COUNTRY_TYPE'\n\nexport const SET_singleCountry_CRD = 'SET_SINGLE_COUNTRY_CRD'\n\nexport const SET_singleCountry_scatterType = 'SET_SINGLE_COUNTRY_scatterType'\n\nexport const SET_singleCountry_pieDateSingle =\n  'SET_SINGLE_COUNTRY_pieDateSingle'\n\nexport const SET_singleCountry_dateRange = 'SET_SINGLE_COUNTRY_dateRange'\n\nexport const SET_singleCountry_xaxisDateDiff =\n  'SET_SINGLE_COUNTRY_xaxisDateDiff'\n\nexport const SET_MAP_DATA = 'SET_MAP_DATA'\n\nexport const SET_STATS_TIMELINE = 'SET_STATS_TIMELINE'\n\nexport const SET_STATS_COUNTRIES = 'SET_STATS_COUNTRIES'\n","import axios from 'axios'\n\nasync function mapEffect() {\n  let response\n\n  try {\n    response = await axios.get('https://corona.lmao.ninja/v2/countries')\n    return response.data\n  } catch (e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e)\n    return\n  }\n}\n\nexport const geoData = async () => {\n  const data = await mapEffect().then((data) => {\n    return data\n  })\n\n  const hasData = Array.isArray(data) && data.length > 0\n\n  if (!hasData) return\n  const countriesObj = {}\n  data.map((el) => (countriesObj[el['country']] = el))\n\n  const geoJson = {\n    type: 'FeatureCollection',\n    features: data.map((country) => {\n      const { countryInfo = {} } = country\n      const { lat, long: lng } = countryInfo\n      return {\n        type: 'Feature',\n        properties: {\n          ...country,\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat],\n        },\n      }\n    }),\n  }\n\n  return { geoJson, countriesObj }\n}\n","import React, { useState, useEffect } from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport L from 'leaflet'\nimport moment from 'moment'\nimport { geoData } from './helper'\nimport { Box, Image, Text, Badge } from '@chakra-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\n// import { useToast, Box, Button } from '@chakra-ui/core'\nconst icon = (url) =>\n  new L.icon({\n    iconUrl: 'https://img.icons8.com/color/96/000000/marker.png',\n    iconSize: [25, 25],\n  })\nconst Maps = () => {\n  const dispatch = useDispatch()\n  const [data, updateData] = useState(useSelector((state) => state.mapData))\n\n  // const [pop, activePop] = useState(null);\n  const asyncfun = async () => {\n    return await geoData().then((data) => data)\n  }\n  const position = [51.505, -0.09]\n  const dataMap = () => {\n    asyncfun().then((data) => {\n      updateData(data.geoJson)\n      dispatch({\n        type: actionTypes.SET_STATS_COUNTRIES,\n        payload: data.countriesObj,\n      })\n      dispatch({ type: actionTypes.SET_MAP_DATA, payload: data.geoJson })\n    })\n  }\n  useEffect(() => {\n    if (!Object.keys(data).length) dataMap()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const marker = (prop) => {\n    // deathsPerOneMillion: 0\n    // tests: 6395\n    // testsPerOneMillion: 430\n    // todayDeaths: 0\n    const properties = prop.properties\n    const date = new Date(properties.updated)\n    let lastUpdated = moment(date).fromNow()\n    return (\n      <Marker\n        icon={icon()}\n        key={properties.country}\n        position={[...prop.geometry.coordinates].reverse()}\n      >\n        <Popup>\n          <Box\n            d='flex'\n            flexDir='column'\n            justifyContent='space-evenly'\n            height='auto'\n            width={200}\n          >\n            <Image\n              mt='0'\n              alignSelf='center'\n              src={properties.countryInfo.flag}\n              alt='country flag'\n              height='auto'\n              width='50%'\n              // style={{ height: 'auto', width: '50%' }}\n            />\n            <Text mt='4%' fontSize='lg'>\n              {properties.country}\n            </Text>\n            <Box d='flex' alignItems='center' flexDir='column'>\n              <Text fontSize='md' marginY='0'>\n                Total Cases : {properties.cases}\n              </Text>\n              <Badge\n                variantColor='purple'\n                variant='solid'\n                fontSize='md'\n                marginY='3'\n              >\n                +{properties.todayCases}\n              </Badge>\n              <Text fontSize='sm'> Active : {properties.active} </Text>\n              <Text fontSize='sm'> Recovered : {properties.recovered} </Text>\n              <Text fontSize='sm'> Deaths : {properties.deaths} </Text>\n              <Text fontSize='sm'>\n                Cases Per Million : {properties.casesPerOneMillion}\n              </Text>\n              <Text fontSize='sm'> Updated {lastUpdated} </Text>\n            </Box>\n          </Box>\n        </Popup>\n      </Marker>\n    )\n  }\n\n  const map = (\n    <>\n      <div className='map'>\n        <Map center={position} zoom={4} maxZoom={15} minZoom={3}>\n          <TileLayer\n            // url='https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png'\n            // attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n            url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          {Object.keys(data).length\n            ? data.features.map((el) => marker(el))\n            : console.log('data not fetched or markers not working')}\n        </Map>\n      </div>\n    </>\n  )\n  return map\n}\nexport default Maps\n","import React, { useEffect, useState } from 'react'\nimport {\n  Box,\n  Text,\n  Progress,\n  Badge,\n  Icon,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuOptionGroup,\n  MenuItemOption,\n  Button,\n} from '@chakra-ui/core'\nimport axios from 'axios'\nimport { useSelector, useDispatch } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\nconst DesktopVisualizerLeft = (prop) => {\n  // const active = prop.active\n  const timelineData = useSelector((state) => state.stats.timeline)\n  const countryData = useSelector((state) => state.stats.countries)\n  const [currentCountry, setCurrentCountry] = useState('')\n  const dispatch = useDispatch()\n  const [dataStateGlobal, setdataStateGlobal] = useState(false)\n  const getData = async () => {\n    const api = 'https://corona-api.com/timeline'\n    try {\n      let response = await axios.get(api).then((data) => data.data.data)\n      await dispatch({\n        type: actionTypes.SET_STATS_TIMELINE,\n        payload: response,\n      })\n      await setdataStateGlobal(true)\n    } catch (e) {\n      console.log(`Failed to fetch countries: ${e.message}`, e)\n      return\n    }\n  }\n  useEffect(() => {\n    if (Object.keys(timelineData)) getData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  const FetchingData = () => (\n    <Box\n      d='flex'\n      height='20%'\n      width='full'\n      justifyContent='center'\n      alignItems='center'\n      backgroundColor='gray.500'\n    >\n      Fetching Data\n    </Box>\n  )\n  const Global = () => {\n    const latestGlobalData = timelineData[0]\n    const boxARDStyle = {\n      d: 'flex',\n      flexDir: 'row',\n      justifyContent: 'space-between',\n      mt: '1%',\n      alignItems: 'center',\n    }\n    const confirmed = latestGlobalData.confirmed\n    const active = latestGlobalData.active\n    const recovered = latestGlobalData.recovered\n    const deaths = latestGlobalData.deaths\n\n    const percentage = {\n      active: (active / confirmed) * 100,\n      recovered: (recovered / confirmed) * 100,\n      deaths: (deaths / confirmed) * 100,\n    }\n    const commaSepNo = (num) =>\n      num.toLocaleString('en', {\n        useGrouping: true,\n      })\n    console.log(latestGlobalData, percentage)\n    return (\n      <Box borderWidth='1px' rounded='md' p='2%'>\n        <Box d='flex' alignItems='flex-start' flexDir='column'>\n          <Text color='gray.600' fontSize='xl' mb='1%' fontWeight='bold'>\n            Worldwide\n          </Text>\n          <Text color='gray.500' fontSize='md'>\n            Total Confirmed Cases\n          </Text>\n          <Text color='black' fontSize='2xl' mb='1%' fontWeight='semibold'>\n            {commaSepNo(confirmed)}\n          </Text>\n        </Box>\n        <Box d='flex' paddingX='2px'>\n          <Progress\n            color='blue'\n            size='sm'\n            value={100}\n            width={percentage.active + '%'}\n            roundedLeft='md'\n          />\n          <Progress\n            color='green'\n            size='sm'\n            value={100}\n            width={percentage.recovered + '%'}\n          />\n          <Progress\n            color='red'\n            size='sm'\n            value={100}\n            width={percentage.deaths + '%'}\n            roundedRight='md'\n          />\n        </Box>\n        <Box d='flex' flexDir='column' justifyContent='space-evenly'>\n          <Box {...boxARDStyle}>\n            <Badge variant='solid' variantColor='blue' fontSize='0.8em'>\n              Active Cases\n            </Badge>\n            <Box d='flex' alignItems='center'>\n              <Icon name='triangle-up' color='blue.500' />\n              <Text color='gray.500' fontSize='md'>\n                {commaSepNo(latestGlobalData.new_confirmed)}\n              </Text>\n            </Box>\n            <Text color='black' fontSize='md'>\n              {commaSepNo(active)}\n            </Text>\n          </Box>\n          <Box {...boxARDStyle}>\n            <Badge variant='solid' variantColor='green' fontSize='0.8em'>\n              Recovered\n            </Badge>\n            <Box d='flex' alignItems='center'>\n              <Icon name='triangle-up' color='green.500' />\n              <Text color='gray.500' fontSize='md'>\n                {commaSepNo(latestGlobalData.new_recovered)}\n              </Text>\n            </Box>\n            <Text color='black' fontSize='md'>\n              {commaSepNo(recovered)}\n            </Text>\n          </Box>\n          <Box {...boxARDStyle}>\n            <Badge variant='solid' variantColor='red' fontSize='0.8em'>\n              Deaths\n            </Badge>\n            <Box d='flex' alignItems='center'>\n              <Icon name='triangle-up' color='red.500' />\n              <Text color='gray.500' fontSize='md'>\n                {commaSepNo(latestGlobalData.new_deaths)}\n              </Text>\n            </Box>\n            <Text color='black' fontSize='md'>\n              {commaSepNo(deaths)}\n            </Text>\n          </Box>\n        </Box>\n        <Box d='flex' fontSize='sm' mt='2px'>\n          Ratio of Recovery &nbsp;\n          <Text color='blue.500'>\n            {percentage.recovered.toFixed(2) + '%'}&nbsp;\n          </Text>\n          & Deaths &nbsp;\n          <Text color='blue.500'>{percentage.deaths.toFixed(2) + '%'}</Text>\n        </Box>\n      </Box>\n    )\n  }\n  const CountryWise = () => {\n    const CountryList = () => (\n      <Box d='flex' flexDir='column' w='100%'>\n        <Menu closeOnSelect={true}>\n          <MenuButton mt={1} mb={1} as={Button} variantColor='blue' size='md'>\n            {currentCountry || 'Select country'}\n          </MenuButton>\n          <MenuList\n            minWidth='240px'\n            maxHeight='50vh'\n            overflowY='scroll'\n            placement='top'\n          >\n            <MenuOptionGroup\n              title='Country'\n              type='radio'\n              onChange={(value) => setCurrentCountry(value)}\n              defaultValue={currentCountry}\n            >\n              {Object.keys(countryData).map((el) => {\n                return (\n                  <MenuItemOption key={el} value={el}>\n                    {el}\n                  </MenuItemOption>\n                )\n              })}\n            </MenuOptionGroup>\n          </MenuList>\n        </Menu>\n      </Box>\n    )\n    const SingleCountry = (prop) => {\n      if (!currentCountry) return ''\n      const singleCountryData =\n        countryData[currentCountry ? currentCountry : 'Afghanistan']\n      const boxARDStyle = {\n        d: 'flex',\n        flexDir: 'row',\n        justifyContent: 'space-between',\n        mt: '1%',\n        alignItems: 'center',\n      }\n      const confirmed = singleCountryData.cases\n      const todayCases = singleCountryData.todayCases\n      const active = singleCountryData.active\n      const recovered = singleCountryData.recovered\n      const deaths = singleCountryData.deaths\n      const tests = singleCountryData.tests\n      const testsPerOneMillion = singleCountryData.testsPerOneMillion\n      const casesPerOneMillion = singleCountryData.casesPerOneMillion\n\n      const percentage = {\n        active: (active / confirmed) * 100,\n        recovered: (recovered / confirmed) * 100,\n        deaths: (deaths / confirmed) * 100,\n      }\n      const commaSepNo = (num) =>\n        num.toLocaleString('en', {\n          useGrouping: true,\n        })\n      return (\n        <Box borderWidth='1px' rounded='md' p='2%'>\n          <Box d='flex' alignItems='flex-start' flexDir='column'>\n            <Text color='gray.600' fontSize='xl' mb='1%' fontWeight='bold'>\n              {currentCountry}\n            </Text>\n            <Text color='gray.500' fontSize='md'>\n              Total Confirmed Cases\n            </Text>\n            <Text color='black' fontSize='2xl' mb='1%' fontWeight='semibold'>\n              {commaSepNo(confirmed)}\n            </Text>\n          </Box>\n          <Box d='flex' paddingX='2px'>\n            <Progress\n              color='blue'\n              size='sm'\n              value={100}\n              width={percentage.active + '%'}\n              roundedLeft='md'\n            />\n            <Progress\n              color='green'\n              size='sm'\n              value={100}\n              width={percentage.recovered + '%'}\n            />\n            <Progress\n              color='red'\n              size='sm'\n              value={100}\n              width={percentage.deaths + '%'}\n              roundedRight='md'\n            />\n          </Box>\n          <Box d='flex' flexDir='column' justifyContent='space-evenly'>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='blue' fontSize='0.8em'>\n                Active Cases\n              </Badge>\n              <Box d='flex' alignItems='center'>\n                <Icon name='triangle-up' color='blue.500' />\n                <Text color='gray.500' fontSize='md'>\n                  {commaSepNo(todayCases)}\n                </Text>\n              </Box>\n              <Text color='black' fontSize='md'>\n                {commaSepNo(active)}\n              </Text>\n            </Box>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='green' fontSize='0.8em'>\n                Recovered\n              </Badge>\n              <Text color='black' fontSize='md'>\n                {commaSepNo(recovered)}\n              </Text>\n            </Box>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='red' fontSize='0.8em'>\n                Deaths\n              </Badge>\n\n              <Text color='black' fontSize='md'>\n                {commaSepNo(deaths)}\n              </Text>\n            </Box>\n          </Box>\n          <Box d='flex' fontSize='sm' mt='2px'>\n            Ratio of Recovery &nbsp;\n            <Text color='blue.500'>\n              {percentage.recovered.toFixed(2) + '%'}&nbsp;\n            </Text>\n            & Deaths &nbsp;\n            <Text color='blue.500'>{percentage.deaths.toFixed(2) + '%'}</Text>\n          </Box>\n          <Box d='flex' flexDir='column' fontSize='sm' mt='2px'>\n            <Box d='flex'>\n              <Box d='flex'>\n                Tests: &nbsp;\n                <Text color='blue.500'>{commaSepNo(tests)}&nbsp;</Text>\n              </Box>\n              <Box d='flex'>\n                Tests per Million: &nbsp;\n                <Text color='blue.500'>\n                  {commaSepNo(testsPerOneMillion)}&nbsp;\n                </Text>\n              </Box>\n            </Box>\n            <Box d='flex'>\n              Cases per Million: &nbsp;\n              <Text color='blue.500'>\n                {commaSepNo(casesPerOneMillion)}&nbsp;\n              </Text>\n            </Box>\n          </Box>\n        </Box>\n      )\n    }\n    return (\n      <Box d='flex' flexDir='column' w='100%'>\n        <Box d='flex' alignItems='center' justifyContent='center'>\n          <CountryList />\n        </Box>\n        <SingleCountry currentCountry={currentCountry} />\n      </Box>\n    )\n  }\n  const MapLeftDiv = (\n    <Box d='flex' flexDir='column' h='100%'>\n      {dataStateGlobal ? (\n        <Box width='100%' bg='#fff' paddingX='3%' pt='3%'>\n          <Global />\n          <Box d={['None', 'flex']}>\n            <CountryWise />\n          </Box>\n        </Box>\n      ) : (\n        FetchingData()\n      )}\n    </Box>\n  )\n  return MapLeftDiv\n}\n\nexport default DesktopVisualizerLeft\n","import {\n  Alert,\n  AlertIcon,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuDivider,\n  MenuOptionGroup,\n  MenuItemOption,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Text,\n  Box,\n} from '@chakra-ui/core'\nimport React, { useState, useEffect, Fragment } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\nimport moment from 'moment'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst CountryChart = () => {\n  const dispatch = useDispatch()\n  const countries = useSelector((state) => state.visualizeData)\n  const [countryArr] = useState(Object.keys(countries).sort())\n  const singleCountryData = useSelector((state) => state.singleCountryData)\n\n  const [singleCountryPlot, setSingleCountryPlot] = useState({})\n  const currentCountry = singleCountryData.country\n  const currentType = singleCountryData.type\n  const dateDiff = singleCountryData.xaxisDateDiff\n  const CRD = singleCountryData.CRD\n  const scatterType = singleCountryData.scatterType\n  const [apply, setApply] = useState(false)\n  const modifySingleCountry = (term) => {\n    if (term === 'CRD') {\n      if (CRD.length) {\n        let update = false\n        const plot = {\n          data: [],\n          layout: {\n            title: currentCountry + ' ' + currentType + ' chart',\n            xaxis: {},\n          },\n          frames: [],\n          config: {},\n        }\n        const getKey = {\n          cases: 'confirmed',\n          deaths: 'deaths',\n          recovered: 'recovered',\n          active: 'active',\n          new_confirmed: 'new_confirmed',\n          new_deaths: 'new_deaths',\n          new_recovered: 'new_recovered',\n          date: 'date',\n        }\n        const colors = {\n          cases: '#E33427',\n          deaths: '#5A0924',\n          recovered: '#09D32C',\n          active: '#10AAC0',\n          new_confirmed: '#3E08E0',\n          new_deaths: '#78BBD9',\n          new_recovered: '#98AAC0',\n        }\n\n        if (['scatter', 'bar'].includes(currentType)) {\n          CRD.forEach((el) => {\n            const xaxisDate = countries[currentCountry]['timeline']['date']\n            const yAxisData = countries[currentCountry]['timeline'][getKey[el]]\n            const data = {\n              type: currentType,\n              x: xaxisDate,\n              y: yAxisData,\n              name: el,\n              marker: {\n                color: colors[el],\n              },\n            }\n\n            if (currentType === 'scatter') {\n              data['mode'] = scatterType[el] ? scatterType[el] : 'lines'\n            }\n            plot.data.push(data)\n            update = true\n          })\n          plot.layout.xaxis = {\n            dtick: singleCountryData.xaxisDateDiff * 86400000,\n            automargin: true,\n            title: {\n              text: 'Timeline',\n              standoff: 5,\n            },\n            autorange: true,\n            rangeselector: {\n              buttons: [\n                {\n                  count: 1,\n                  label: '1m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                {\n                  count: 3,\n                  label: '3m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                {\n                  count: 6,\n                  label: '6m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                { step: 'all' },\n              ],\n            },\n            rangeslider: { range: [] },\n            type: 'date',\n          }\n        }\n        if (currentType === 'pie') {\n          const pieDateSingle = singleCountryData.pieDateSingle\n          if (CRD.length && pieDateSingle) {\n            const dateArr = countries[currentCountry]['timeline']['date']\n            const values = []\n            const labels = []\n            const markers = []\n            CRD.forEach((el) => {\n              const arr = countries[currentCountry]['timeline'][getKey[el]]\n              const dateIndex = dateArr.indexOf(pieDateSingle)\n              const val = pieDateSingle ? arr[dateIndex] : arr.pop()\n              values.push(val)\n              labels.push(el)\n              markers.push(colors[el])\n            })\n            const data = {\n              type: currentType,\n              values: values,\n              labels: labels,\n              marker: {\n                colors: markers,\n              },\n              texttemplate: '%{label}: %{value} (%{percent})',\n              textinfo: 'label+percent',\n              textposition: 'outside',\n              automargin: true,\n            }\n            plot.data.push(data)\n            plot.layout.title =\n              plot.layout.title +\n              ' as on ' +\n              (pieDateSingle ? pieDateSingle : dateArr.pop())\n            update = true\n          }\n        }\n        if (update) setSingleCountryPlot(plot)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (singleCountryData.country && apply) {\n      dispatch({ type: actionTypes.SET_PLOT, payload: singleCountryPlot })\n      setApply(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [singleCountryPlot])\n  useEffect(() => {\n    modifySingleCountry('CRD')\n    setApply(true)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [singleCountryData])\n  const setScatter = (arg) => {\n    const arr = arg.split('-')\n    dispatch({\n      type: actionTypes.SET_singleCountry_scatterType,\n      payload: { ...scatterType, [arr[0]]: arr[1] },\n    })\n  }\n  const optionsArray = ['Cases', 'Deaths', 'Recovered', 'Active']\n  return (\n    <>\n      <Menu closeOnSelect={true}>\n        <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n          Select country\n        </MenuButton>\n        <MenuList\n          minWidth='240px'\n          maxHeight='70vh'\n          overflowY='scroll'\n          zIndex={2}\n        >\n          <MenuOptionGroup\n            title='Country'\n            type='radio'\n            onChange={(value) => {\n              dispatch({ type: actionTypes.SET_singleCountry, payload: value })\n              dispatch({\n                type: actionTypes.SET_singleCountry_dateRange,\n                payload: Object.keys(\n                  countries[value]['timeline']['dataByDate']\n                ).reverse(),\n              })\n            }}\n            defaultValue={currentCountry}\n          >\n            {countryArr.map((el) => {\n              return (\n                <MenuItemOption key={el} value={el}>\n                  {el}\n                </MenuItemOption>\n              )\n            })}\n          </MenuOptionGroup>\n        </MenuList>\n      </Menu>\n      {currentCountry ? (\n        <>\n          <Menu closeOnSelect={true}>\n            <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n              Select type\n            </MenuButton>\n            <MenuList minWidth='240px'>\n              <MenuOptionGroup\n                title='type'\n                type='radio'\n                onChange={(value) =>\n                  dispatch({\n                    type: actionTypes.SET_singleCountry_type,\n                    payload: value,\n                  })\n                }\n                defaultValue={currentType}\n              >\n                {['Bar', 'Scatter', 'Pie'].map((el) => {\n                  return (\n                    <MenuItemOption\n                      key={el.toLowerCase()}\n                      value={el.toLowerCase()}\n                    >\n                      {el}\n                    </MenuItemOption>\n                  )\n                })}\n              </MenuOptionGroup>\n            </MenuList>\n          </Menu>\n          {currentType ? (\n            <>\n              <Menu closeOnSelect={false}>\n                <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n                  Add to graph\n                </MenuButton>\n                <MenuList minWidth='240px'>\n                  <MenuOptionGroup\n                    title='Select one or more'\n                    type='checkbox'\n                    onChange={(value) =>\n                      dispatch({\n                        type: actionTypes.SET_singleCountry_CRD,\n                        payload: value,\n                      })\n                    }\n                    defaultValue={CRD}\n                  >\n                    {optionsArray.map((el) => {\n                      return (\n                        <MenuItemOption\n                          key={el.toLowerCase()}\n                          value={el.toLowerCase()}\n                        >\n                          {el}\n                        </MenuItemOption>\n                      )\n                    })}\n                  </MenuOptionGroup>\n                </MenuList>\n              </Menu>\n              {currentType === 'scatter' && CRD.length ? (\n                <Menu closeOnSelect={false}>\n                  <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n                    Modes\n                  </MenuButton>\n                  <MenuList minWidth='240px' position='relative'>\n                    {optionsArray.map((el) => {\n                      const el_lowercase = el.toLowerCase()\n                      return CRD.includes(el_lowercase) ? (\n                        <Fragment key={el + 'modeFragment'}>\n                          <MenuOptionGroup\n                            key={el + 'modes'}\n                            title={el}\n                            type='radio'\n                            defaultValue={\n                              el_lowercase + '-' + scatterType[el_lowercase]\n                            }\n                            onChange={(value) => setScatter(value)}\n                          >\n                            <MenuItemOption\n                              key={el_lowercase + '-markers'}\n                              value={el_lowercase + '-markers'}\n                            >\n                              Markers\n                            </MenuItemOption>\n                            <MenuItemOption\n                              key={el_lowercase + '-lines'}\n                              value={el_lowercase + '-lines'}\n                            >\n                              Lines\n                            </MenuItemOption>\n                            <MenuItemOption\n                              key={el_lowercase + '-lines+markers'}\n                              value={el_lowercase + '-lines+markers'}\n                            >\n                              Lines + Markers\n                            </MenuItemOption>\n                          </MenuOptionGroup>\n                          <MenuDivider key={el + 'divider'} />\n                        </Fragment>\n                      ) : null\n                    })}\n                  </MenuList>\n                </Menu>\n              ) : null}\n              {['bar', 'scatter'].includes(currentType) && CRD.length ? (\n                <>\n                  <Text color='gray.500' mt={2}>\n                    Select spacing between date on xaxis\n                  </Text>\n                  <NumberInput\n                    mt={2}\n                    defaultValue={dateDiff}\n                    onChange={(value) =>\n                      dispatch({\n                        type: actionTypes.SET_singleCountry_xaxisDateDiff,\n                        payload: value,\n                      })\n                    }\n                  >\n                    <NumberInputField type='number' placeholder='Default' />{' '}\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </>\n              ) : null}\n              {currentType === 'pie' && CRD.length ? (\n                <>\n                  <Box mt={2}>\n                    {!singleCountryData.pieDateSingle ? (\n                      <Alert status='info'>\n                        <AlertIcon />\n                        Select a date below\n                      </Alert>\n                    ) : null}\n\n                    <Box border='2px'>\n                      <DatePicker\n                        {...(singleCountryData.pieDateSingle\n                          ? {\n                              selected: moment(\n                                singleCountryData.pieDateSingle,\n                                moment.defaultFormat\n                              ).toDate(),\n                            }\n                          : undefined)}\n                        dateFormat='dd/MM/yyyy'\n                        onChange={(date) =>\n                          dispatch({\n                            type: actionTypes.SET_singleCountry_pieDateSingle,\n                            payload: moment(date).format('YYYY-MM-DD'),\n                          })\n                        }\n                        minDate={moment(\n                          singleCountryData.dateRange[0],\n                          moment.defaultFormat\n                        ).toDate()}\n                        maxDate={moment(\n                          singleCountryData.dateRange[\n                            singleCountryData.dateRange.length - 1\n                          ],\n                          moment.defaultFormat\n                        ).toDate()}\n                        includeDates={singleCountryData.dateRange.map((el) =>\n                          moment(el, moment.defaultFormat).toDate()\n                        )}\n                        placeholderText='Select a date'\n                      />\n                    </Box>\n                  </Box>\n                </>\n              ) : null}\n            </>\n          ) : null}\n        </>\n      ) : null}\n    </>\n  )\n}\n\nexport default CountryChart\n","import {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  Button,\n  Select,\n  useDisclosure,\n  Box,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/core'\n\nimport React, { useState } from 'react'\nimport CountryChart from './singleCountryChart'\n\nconst DrawerOption = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  const [option, setoption] = useState('')\n\n  const switchOption = (value) => {\n    switch (value) {\n      case 'country-chart':\n        return (\n          <>\n            <CountryChart key='country-chart' />\n          </>\n        )\n      case 'compare-countries':\n        return (\n          <Alert status='info' mt={2}>\n            <AlertIcon />\n            Compare Countries feature is coming soon!\n          </Alert>\n        )\n      default:\n        return\n    }\n  }\n\n  return (\n    <>\n      <Button\n        ref={btnRef}\n        // pos='absolute'\n        // bottom='4%'\n        // left='1%'\n        variantColor='teal'\n        onClick={onOpen}\n        // zIndex={100}\n        key='menu-button'\n        leftIcon='edit'\n      >\n        Create\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement='left'\n        onClose={onClose}\n        isFullHeight={true}\n        key='drawer-content'\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>Create your chart</DrawerHeader>\n          <DrawerBody>\n            <Box\n              flexDirection='column'\n              display='flex'\n              alignItems='baseline'\n              justifyContent='space-between'\n            >\n              <Select\n                placeholder='Select option'\n                onChange={(e) => setoption(e.target.value)}\n                defaultValue={option}\n              >\n                <option value='country-chart'>Country Chart</option>\n                <option value='compare-countries'>Compare Countries</option>\n              </Select>\n              {switchOption(option)}\n            </Box>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant='outline' mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n\nexport default DrawerOption\n","import React, { useState } from 'react'\nimport './styles.css'\nimport Graph from './components/visualize'\nimport Maps from './components/Maps'\nimport DesktopVisualizerLeft from './components/desktopVisualizerLeft'\nimport DrawerOption from './components/drawer'\nimport { ThemeProvider, CSSReset, Box, Button } from '@chakra-ui/core'\n\nconst App = () => {\n  const [activeComp, setActiveComp] = useState('map')\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Box height='100vh'>\n        <Box d='flex' height='96%'>\n          <Box d='flex' width='100%' height='100%' flexDir={['column', 'row']}>\n            <Box\n              d='flex'\n              flexDir='column'\n              flexWrap='nowrap'\n              width={['100%', '100%', '100%', '25%']}\n              bg='#fff'\n            >\n              <Box d='flex' flexDir='column' h={['50%', '50%', '50%', '100%']}>\n                <Box textAlign='center' fontSize='2em' bg='#ff4' height='auto'>\n                  Corona Visualizer\n                </Box>\n                <Box>\n                  <DesktopVisualizerLeft active={activeComp} />\n                </Box>\n                <Box\n                  d='flex'\n                  mt='auto'\n                  height='auto'\n                  width='full'\n                  justifyContent='center'\n                >\n                  {activeComp === 'map' ? (\n                    <Box alignSelf='flex-end'>\n                      <Button\n                        variantColor='pink'\n                        variant='solid'\n                        onClick={() => setActiveComp('graph')}\n                      >\n                        Visualize\n                      </Button>\n                    </Box>\n                  ) : (\n                    <Box\n                      w='100%'\n                      d='flex'\n                      alignItems='center'\n                      justifyContent='space-evenly'\n                    >\n                      <Box d={['None', 'initial']}>\n                        <DrawerOption key='drawer-option' />\n                      </Box>\n\n                      <Button\n                        variantColor='teal'\n                        variant='solid'\n                        onClick={() => setActiveComp('map')}\n                      >\n                        Map\n                      </Button>\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n            </Box>\n            <Box width={['100%', '75%']} height='100%' bg='#fff'>\n              {activeComp === 'map' ? <Maps /> : <Graph />}\n            </Box>\n          </Box>\n        </Box>\n        <div className='info-box'>\n          <div></div>\n          <div className='footnote'>\n            <a\n              href='https://devcj.in'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              Built By <span className='highlight'>CJ</span>\n            </a>\n          </div>\n          <a\n            href='https://github.com/dev-cj/visualize-corona'\n            target='_blank'\n            rel='noopener noreferrer'\n            style={{ color: '#fff' }}\n          >\n            Fork this repo <span className='highlight'>here &nbsp;</span>\n          </a>\n        </div>\n      </Box>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {}\n\nconst visualizeReducer = (state = initialState, action) => {\n  // console.log(state, action)\n  switch (action.type) {\n    case actionTypes.SET_DATA: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    default:\n      return state\n  }\n}\nexport default visualizeReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {\n  plotData: {\n    data: [\n      {\n        type: 'bar',\n        x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June'],\n        y: [2, 5, 6, 15, 4, 2],\n      },\n      {\n        type: 'bar',\n        x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June'],\n        y: [2, 5, 3, 2, 20, 7],\n      },\n    ],\n    layout: {\n      autosize: true,\n      title: '<b style=\"font-size:1.2em;\">A Sample Plot</b>',\n      barmode: 'group',\n      xaxis: {},\n    },\n    frames: [],\n    config: {},\n  },\n}\n\nconst plotReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_PLOT: {\n      return {\n        plotData: {\n          ...action.payload,\n          layout: {\n            ...action.payload.layout,\n            images: [\n              {\n                name: 'watermark_CJ',\n                source: 'https://devcj.in/images/logo.png',\n                xref: 'paper',\n                yref: 'paper',\n                x: 0,\n                y: 0.9,\n                sizex: 0.1,\n                sizey: 0.1,\n                opacity: 0.1,\n                layer: 'below',\n              },\n            ],\n          },\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\nexport default plotReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {\n  country: '',\n  type: '',\n  CRD: [],\n  scatterType: {},\n  pieDateType: 'single',\n  pieDateSingle: '',\n  xaxisDateDiff: 0,\n  dateRange: [],\n}\n\nconst singleCountryReducer = (state = initialState, action) => {\n  //   console.log(state, action)\n  switch (action.type) {\n    case actionTypes.SET_SingleCountryData: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry: {\n      return {\n        ...state,\n        country: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_type: {\n      return {\n        ...state,\n        type: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_CRD: {\n      return {\n        ...state,\n        CRD: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_scatterType: {\n      return {\n        ...state,\n        scatterType: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_pieDateSingle: {\n      return {\n        ...state,\n        pieDateSingle: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_dateRange: {\n      return {\n        ...state,\n        dateRange: action.payload,\n      }\n    }\n\n    case actionTypes.SET_singleCountry_xaxisDateDiff: {\n      return {\n        ...state,\n        xaxisDateDiff: action.payload,\n      }\n    }\n    default:\n      return state\n  }\n}\nexport default singleCountryReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {}\n\nconst mapDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_MAP_DATA: {\n      return action.payload\n    }\n\n    default:\n      return state\n  }\n}\nexport default mapDataReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = { timeline: {}, countries: {} }\n\nconst statsDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_STATS_TIMELINE: {\n      return { ...state, timeline: { ...action.payload } }\n    }\n    case actionTypes.SET_STATS_COUNTRIES: {\n      return { ...state, countries: { ...action.payload } }\n    }\n    default:\n      return state\n  }\n}\nexport default statsDataReducer\n","import { combineReducers } from 'redux'\nimport visualizeReducer from './visualizeReducer'\nimport plotReducer from './plotReducer'\nimport singleCountryReducer from './singleCountryReducer'\nimport mapDataReducer from './mapDataReducer'\nimport statsDataReducer from './statsDataReducer'\nexport default combineReducers({\n  visualizeData: visualizeReducer,\n  plotReducer,\n  singleCountryData: singleCountryReducer,\n  mapData: mapDataReducer,\n  stats: statsDataReducer,\n})\n","import { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducer/'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst middleWare = [thunk]\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(...middleWare))\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}