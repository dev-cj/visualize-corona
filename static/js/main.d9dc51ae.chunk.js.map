{"version":3,"sources":["components/visualize.js","redux/actions/actionTypes.js","components/helper.js","components/Maps.js","components/desktopVisualizerLeft.js","components/singleCountryChart.js","components/drawer.js","App.js","serviceWorker.js","redux/reducer/visualizeReducer.js","redux/reducer/plotReducer.js","redux/reducer/singleCountryReducer.js","redux/reducer/mapDataReducer.js","redux/reducer/statsDataReducer.js","redux/reducer/index.js","redux/store.js","index.js"],"names":["fetchData","url","a","axios","get","response","data","console","log","message","Graph","dispatch","useDispatch","plotData","useSelector","state","plotReducer","useState","visualizeData","countryData","addData","getData","then","obj","forEach","el","name","code","type","payload","useEffect","Object","keys","length","Box","d","alignItems","justifyContent","width","bg","Spinner","thickness","speed","emptyColor","color","size","layout","barmode","autosize","window","innerWidth","height","innerHeight","config","displayModeBar","displaylogo","scrollZoom","responsive","useResizeHandler","style","toImageButtonOptions","format","scale","flexDir","Image","rounded","src","Text","as","mt","fontSize","fontWeight","lineHeight","mapEffect","geoData","Array","isArray","countriesObj","map","geoJson","features","country","countryInfo","lat","lng","long","properties","geometry","coordinates","Maps","mapData","updateData","asyncfun","className","Map","center","zoom","maxZoom","minZoom","TileLayer","attribution","prop","date","Date","updated","lastUpdated","moment","fromNow","Marker","icon","L","iconUrl","iconSize","key","position","reverse","Popup","alignSelf","flag","alt","marginY","cases","Badge","variantColor","variant","todayCases","active","recovered","deaths","casesPerOneMillion","marker","DesktopVisualizerLeft","timelineData","stats","timeline","countries","currentCountry","setCurrentCountry","dataStateGlobal","setdataStateGlobal","Global","latestGlobalData","boxARDStyle","confirmed","percentage","commaSepNo","num","toLocaleString","useGrouping","borderWidth","p","mb","paddingX","Progress","value","roundedLeft","roundedRight","Icon","new_confirmed","new_recovered","new_deaths","toFixed","CountryWise","CountryList","w","Menu","closeOnSelect","Button","data-tname","minWidth","maxHeight","overflowY","placement","MenuOption","title","onChange","defaultValue","SingleCountry","singleCountryData","tests","testsPerOneMillion","h","pt","backgroundColor","CountryChart","sort","countryArr","singleCountryPlot","setSingleCountryPlot","currentType","dateDiff","xaxisDateDiff","CRD","scatterType","apply","setApply","selectCountry","term","update","plot","xaxis","frames","getKey","colors","includes","xaxisDate","yAxisData","x","y","images","push","dtick","automargin","text","standoff","autorange","rangeselector","buttons","count","label","step","stepmode","rangeslider","range","pieDateSingle","dateArr","values","labels","markers","arr","dateIndex","indexOf","val","pop","texttemplate","textinfo","textposition","modifySingleCountry","api","country_response","dataByDate","dataByKey","unshift","COUNTRY_DATA","optionsArray","zIndex","toLowerCase","el_lowercase","arg","split","setScatter","NumberInput","placeholder","Alert","status","border","selected","defaultFormat","toDate","undefined","dateFormat","minDate","dateRange","maxDate","includeDates","placeholderText","DrawerOption","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","option","setoption","ref","onClick","leftIcon","Drawer","isFullHeight","flexDirection","display","Select","e","target","switchOption","mr","App","activeComp","setActiveComp","ThemeProvider","CSSReset","flexWrap","textAlign","document","querySelector","click","md","href","rel","Boolean","location","hostname","match","initialState","visualizeReducer","action","source","xref","yref","sizex","sizey","opacity","layer","pieDateType","singleCountryReducer","mapDataReducer","statsDataReducer","combineReducers","middleWare","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d9dc51ae.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Spinner, Box, Text, Image } from '@chakra-ui/core'\n// import DrawerOption from './drawer'\nimport Plot from 'react-plotly.js'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\nasync function fetchData(url) {\n  // const historical =\n  //   'https://corona.lmao.ninja/v3/covid-19/historical?lastdays=all'\n  // const corona_api = 'https://corona-api.com/countries?include=timeline'\n  const countries = ' https://corona-api.com/countries'\n  try {\n    const api = countries\n    let response = await axios.get(api)\n    // console.log(response.data);\n    return response.data\n  } catch (e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e)\n    return\n  }\n}\n\nexport default function Graph() {\n  const dispatch = useDispatch()\n  const plotData = useSelector((state) => state.plotReducer.plotData)\n  const [countryData, addData] = useState(\n    useSelector((state) => state.visualizeData)\n  )\n  const getData = async () => {\n    const data = await fetchData().then((data) => data)\n    let obj = {}\n    // const old_api_func = () => {\n    //   data.forEach((el) => {\n    //     let country = el.country\n    //     let province = el.province\n    //     let timeline = el.timeline\n    //     if (province) {\n    //       // console.log('province :', country, province, obj)\n    //       obj[country] = { ...obj[country] }\n    //       obj[country]['province'] = { ...obj[country]['province'] }\n\n    //       obj[country]['province'][province] = { province, timeline }\n    //     } else obj[country] = timeline\n    //   })\n    // }\n    // const new_api_func = () => {\n    //   data.data.forEach((el) => {\n    //     let country = el.name\n    //     let keys_arr = Object.keys(el)\n    //     let countryObj = {}\n    //     keys_arr.forEach((key) => {\n    //       if (key === 'timeline') {\n    //         let timelineArr = el[key]\n    //         let timelineObj = {}\n    //         const dataByDate = {}\n    //         let keys = timelineArr[1] ? Object.keys(timelineArr[1]) : null\n    //         if (keys)\n    //           keys.forEach((key) => {\n    //             timelineObj[key] = timelineArr\n    //               .map((obj) => {\n    //                 if (key === 'date') {\n    //                   dataByDate[obj.date] = obj\n    //                 }\n    //                 return obj[key]\n    //               })\n    //               .reverse()\n    //           })\n    //         timelineObj['dataByDate'] = dataByDate\n    //         countryObj[key] = timelineObj\n    //       } else countryObj[key] = el[key]\n    //     })\n    //     obj[country] = { ...countryObj }\n    //   })\n    // }\n    await data.data.forEach(\n      (el) =>\n        (obj[el.name] = {\n          code: el.code,\n        })\n    )\n    await addData(obj)\n    dispatch({ type: actionTypes.SET_DATA, payload: obj })\n  }\n\n  useEffect(() => {\n    if (!Object.keys(countryData).length) getData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <>\n      {Object.keys(countryData).length ? (\n        <Box d={['None', 'initial']}></Box>\n      ) : (\n        <Box\n          d='flex'\n          alignItems='center'\n          justifyContent='center'\n          width='100%'\n          bg='#9AE6B4'\n        >\n          'Fetching Data'\n          <Spinner\n            thickness='4px'\n            speed='0.65s'\n            emptyColor='gray.200'\n            color='blue.500'\n            size='xl'\n          />\n        </Box>\n      )}\n      <Box d={['None', 'initial']}>\n        <Plot\n          data={plotData.data}\n          layout={{\n            ...plotData.layout,\n            type: 'date',\n            barmode: 'group',\n            autosize: true,\n            width: window.innerWidth * 0.75,\n            height: window.innerHeight * 0.96,\n            // margin: {\n            //   l: 50,\n            //   r: 50,\n            //   b: 100,\n            //   t: 100,\n            //   pad: 4,\n            // },\n          }}\n          // frames={this.state.frames}\n          config={{\n            ...plotData.config,\n            displayModeBar: true,\n            displaylogo: false,\n            scrollZoom: true,\n            responsive: true,\n            useResizeHandler: true,\n            style: { width: '100%', height: '100%' },\n            toImageButtonOptions: {\n              format: 'jpeg',\n              scale: 3,\n            },\n          }}\n          // onInitialized={figure => this.setState(figure)}\n          // onUpdate={figure => this.setState(figure)}\n        />\n      </Box>\n      <Box d={['initial', 'None']}>\n        <Box\n          d='flex'\n          flexDir='column'\n          alignItems='center'\n          justifyContent='center'\n        >\n          <Image\n            rounded='md'\n            src='https://raw.githubusercontent.com/dev-cj/visualize-corona/master/src/chartsSample.png'\n          />\n          <Text as='sub'>(Image of desktop view)</Text>\n          <Text mt={2} fontSize='xl' fontWeight='semibold' lineHeight='short'>\n            To visualize and download charts use this website on a Desktop\n          </Text>\n        </Box>\n      </Box>\n    </>\n  )\n}\n","export const SET_DATA = 'SET_API_DATA'\n\nexport const SET_COUNTRY_DATA = 'SET_COUNTRY_DATA'\n\nexport const SET_PLOT = 'SET_PLOT'\n\nexport const SET_SingleCountryData = 'SET_SingleCountryData'\nexport const SET_singleCountry = 'SET_SINGLE_COUNTRY'\n\nexport const SET_singleCountry_type = 'SET_SINGLE_COUNTRY_TYPE'\n\nexport const SET_singleCountry_CRD = 'SET_SINGLE_COUNTRY_CRD'\n\nexport const SET_singleCountry_scatterType = 'SET_SINGLE_COUNTRY_scatterType'\n\nexport const SET_singleCountry_pieDateSingle =\n  'SET_SINGLE_COUNTRY_pieDateSingle'\n\nexport const SET_singleCountry_dateRange = 'SET_SINGLE_COUNTRY_dateRange'\n\nexport const SET_singleCountry_xaxisDateDiff =\n  'SET_SINGLE_COUNTRY_xaxisDateDiff'\n\nexport const SET_MAP_DATA = 'SET_MAP_DATA'\n\nexport const SET_STATS_TIMELINE = 'SET_STATS_TIMELINE'\n\nexport const SET_STATS_COUNTRIES = 'SET_STATS_COUNTRIES'\n","import axios from 'axios'\n\nasync function mapEffect() {\n  let response\n\n  try {\n    response = await axios.get('https://corona.lmao.ninja/v2/countries')\n    return response.data\n  } catch (e) {\n    console.log(`Failed to fetch countries: ${e.message}`, e)\n    return\n  }\n}\n\nexport const geoData = async () => {\n  const data = await mapEffect().then((data) => {\n    return data\n  })\n\n  const hasData = Array.isArray(data) && data.length > 0\n\n  if (!hasData) return\n  const countriesObj = {}\n  data.map((el) => (countriesObj[el['country']] = el))\n\n  const geoJson = {\n    type: 'FeatureCollection',\n    features: data.map((country) => {\n      const { countryInfo = {} } = country\n      const { lat, long: lng } = countryInfo\n      return {\n        type: 'Feature',\n        properties: {\n          ...country,\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat],\n        },\n      }\n    }),\n  }\n\n  return { geoJson, countriesObj }\n}\n","import React, { useState, useEffect } from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport L from 'leaflet'\nimport moment from 'moment'\nimport { geoData } from './helper'\nimport { Box, Image, Text, Badge } from '@chakra-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\n// import { useToast, Box, Button } from '@chakra-ui/core'\nconst icon = (url) =>\n  new L.icon({\n    iconUrl: 'https://img.icons8.com/color/96/000000/marker.png',\n    iconSize: [25, 25],\n  })\nconst Maps = () => {\n  const dispatch = useDispatch()\n  const [data, updateData] = useState(useSelector((state) => state.mapData))\n\n  // const [pop, activePop] = useState(null);\n  const asyncfun = async () => {\n    return await geoData().then((data) => data)\n  }\n  const position = [51.505, -0.09]\n  const dataMap = () => {\n    asyncfun().then((data) => {\n      updateData(data.geoJson)\n      dispatch({\n        type: actionTypes.SET_STATS_COUNTRIES,\n        payload: data.countriesObj,\n      })\n      dispatch({ type: actionTypes.SET_MAP_DATA, payload: data.geoJson })\n    })\n  }\n  useEffect(() => {\n    if (!Object.keys(data).length) dataMap()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const marker = (prop) => {\n    const properties = prop.properties\n    const date = new Date(properties.updated)\n    let lastUpdated = moment(date).fromNow()\n    return (\n      <Marker\n        icon={icon()}\n        key={properties.country}\n        position={[...prop.geometry.coordinates].reverse()}\n      >\n        <Popup>\n          <Box\n            d='flex'\n            flexDir='column'\n            justifyContent='space-evenly'\n            height='auto'\n            width={200}\n          >\n            <Image\n              mt='0'\n              alignSelf='center'\n              src={properties.countryInfo.flag}\n              alt='country flag'\n              height='auto'\n              width='50%'\n            />\n            <Text mt='4%' fontSize='lg'>\n              {properties.country}\n            </Text>\n            <Box d='flex' alignItems='center' flexDir='column'>\n              <Text fontSize='md' marginY='0'>\n                Total Cases : {properties.cases}\n              </Text>\n              <Badge\n                variantColor='purple'\n                variant='solid'\n                fontSize='md'\n                marginY='3'\n              >\n                +{properties.todayCases}\n              </Badge>\n              <Text fontSize='sm'> Active : {properties.active} </Text>\n              <Text fontSize='sm'> Recovered : {properties.recovered} </Text>\n              <Text fontSize='sm'> Deaths : {properties.deaths} </Text>\n              <Text fontSize='sm'>\n                Cases Per Million : {properties.casesPerOneMillion}\n              </Text>\n              <Text fontSize='sm'> Updated {lastUpdated} </Text>\n            </Box>\n          </Box>\n        </Popup>\n      </Marker>\n    )\n  }\n\n  const map = (\n    <>\n      <div className='map'>\n        <Map center={position} zoom={4} maxZoom={15} minZoom={3}>\n          <TileLayer\n            // url='https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png'\n            // attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n            url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          {Object.keys(data).length\n            ? data.features.map((el) => marker(el))\n            : console.log('data not fetched or markers not working')}\n        </Map>\n      </div>\n    </>\n  )\n  return map\n}\nexport default Maps\n","import React, { useEffect, useState } from 'react'\nimport {\n  Box,\n  Text,\n  Progress,\n  Badge,\n  Icon,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuOptionGroup,\n  MenuItemOption,\n  Button,\n} from '@chakra-ui/core'\nimport axios from 'axios'\nimport { useSelector, useDispatch } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\n\nconst DesktopVisualizerLeft = (prop) => {\n  // const active = prop.active\n  const timelineData = useSelector((state) => state.stats.timeline)\n  const countryData = useSelector((state) => state.stats.countries)\n  const [currentCountry, setCurrentCountry] = useState('')\n  const dispatch = useDispatch()\n  const [dataStateGlobal, setdataStateGlobal] = useState(false)\n  const getData = async () => {\n    const api = 'https://corona-api.com/timeline'\n    try {\n      let response = await axios.get(api).then((data) => data.data.data)\n      await dispatch({\n        type: actionTypes.SET_STATS_TIMELINE,\n        payload: response,\n      })\n      await setdataStateGlobal(true)\n    } catch (e) {\n      console.log(`Failed to fetch countries: ${e.message}`, e)\n      return\n    }\n  }\n  useEffect(() => {\n    if (Object.keys(timelineData)) getData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  const FetchingData = () => (\n    <Box\n      d='flex'\n      height='20%'\n      width='full'\n      justifyContent='center'\n      alignItems='center'\n      backgroundColor='gray.500'\n    >\n      Fetching Data\n    </Box>\n  )\n  const Global = () => {\n    const latestGlobalData = timelineData[0]\n    const boxARDStyle = {\n      d: 'flex',\n      flexDir: 'row',\n      justifyContent: 'space-between',\n      mt: '1%',\n      alignItems: 'center',\n    }\n    const confirmed = latestGlobalData.confirmed\n    const active = latestGlobalData.active\n    const recovered = latestGlobalData.recovered\n    const deaths = latestGlobalData.deaths\n\n    const percentage = {\n      active: (active / confirmed) * 100,\n      recovered: (recovered / confirmed) * 100,\n      deaths: (deaths / confirmed) * 100,\n    }\n    const commaSepNo = (num) =>\n      num.toLocaleString('en', {\n        useGrouping: true,\n      })\n    console.log(latestGlobalData, percentage)\n    return (\n      <Box borderWidth='1px' rounded='md' p='2%'>\n        <Box d='flex' alignItems='flex-start' flexDir='column'>\n          <Text color='gray.600' fontSize='xl' mb='1%' fontWeight='bold'>\n            Worldwide\n          </Text>\n          <Text color='gray.500' fontSize='md'>\n            Total Confirmed Cases\n          </Text>\n          <Text color='black' fontSize='2xl' mb='1%' fontWeight='semibold'>\n            {commaSepNo(confirmed)}\n          </Text>\n        </Box>\n        <Box d='flex' paddingX='2px'>\n          <Progress\n            color='blue'\n            size='sm'\n            value={100}\n            width={percentage.active + '%'}\n            roundedLeft='md'\n          />\n          <Progress\n            color='green'\n            size='sm'\n            value={100}\n            width={percentage.recovered + '%'}\n          />\n          <Progress\n            color='red'\n            size='sm'\n            value={100}\n            width={percentage.deaths + '%'}\n            roundedRight='md'\n          />\n        </Box>\n        <Box d='flex' flexDir='column' justifyContent='space-evenly'>\n          <Box {...boxARDStyle}>\n            <Badge variant='solid' variantColor='blue' fontSize='0.8em'>\n              Active Cases\n            </Badge>\n            <Box d='flex' alignItems='center'>\n              <Icon name='triangle-up' color='blue.500' />\n              <Text color='gray.500' fontSize='md'>\n                {commaSepNo(latestGlobalData.new_confirmed)}\n              </Text>\n            </Box>\n            <Text color='black' fontSize='md'>\n              {commaSepNo(active)}\n            </Text>\n          </Box>\n          <Box {...boxARDStyle}>\n            <Badge variant='solid' variantColor='green' fontSize='0.8em'>\n              Recovered\n            </Badge>\n            <Box d='flex' alignItems='center'>\n              <Icon name='triangle-up' color='green.500' />\n              <Text color='gray.500' fontSize='md'>\n                {commaSepNo(latestGlobalData.new_recovered)}\n              </Text>\n            </Box>\n            <Text color='black' fontSize='md'>\n              {commaSepNo(recovered)}\n            </Text>\n          </Box>\n          <Box {...boxARDStyle}>\n            <Badge variant='solid' variantColor='red' fontSize='0.8em'>\n              Deaths\n            </Badge>\n            <Box d='flex' alignItems='center'>\n              <Icon name='triangle-up' color='red.500' />\n              <Text color='gray.500' fontSize='md'>\n                {commaSepNo(latestGlobalData.new_deaths)}\n              </Text>\n            </Box>\n            <Text color='black' fontSize='md'>\n              {commaSepNo(deaths)}\n            </Text>\n          </Box>\n        </Box>\n        <Box d='flex' fontSize='sm' mt='2px'>\n          Ratio of Recovery &nbsp;\n          <Text color='blue.500'>\n            {percentage.recovered.toFixed(2) + '%'}&nbsp;\n          </Text>\n          & Deaths &nbsp;\n          <Text color='blue.500'>{percentage.deaths.toFixed(2) + '%'}</Text>\n        </Box>\n      </Box>\n    )\n  }\n  const CountryWise = () => {\n    const CountryList = () => (\n      <Box d='flex' flexDir='column' w='100%'>\n        <Menu closeOnSelect={true}>\n          <MenuButton\n            mt={1}\n            mb={1}\n            as={Button}\n            variantColor='blue'\n            size='md'\n            data-tname='SelectCountrySingle'\n          >\n            {currentCountry || 'Select country'}\n          </MenuButton>\n          <MenuList\n            minWidth='240px'\n            maxHeight='50vh'\n            overflowY='scroll'\n            placement='top'\n          >\n            <MenuOptionGroup\n              title='Country'\n              type='radio'\n              onChange={(value) => setCurrentCountry(value)}\n              defaultValue={currentCountry}\n            >\n              {Object.keys(countryData).map((el) => {\n                return (\n                  <MenuItemOption key={el} value={el}>\n                    {el}\n                  </MenuItemOption>\n                )\n              })}\n            </MenuOptionGroup>\n          </MenuList>\n        </Menu>\n      </Box>\n    )\n    const SingleCountry = (prop) => {\n      if (!currentCountry) return ''\n      const singleCountryData =\n        countryData[currentCountry ? currentCountry : 'Afghanistan']\n      const boxARDStyle = {\n        d: 'flex',\n        flexDir: 'row',\n        justifyContent: 'space-between',\n        mt: '1%',\n        alignItems: 'center',\n      }\n      const confirmed = singleCountryData.cases\n      const todayCases = singleCountryData.todayCases\n      const active = singleCountryData.active\n      const recovered = singleCountryData.recovered\n      const deaths = singleCountryData.deaths\n      const tests = singleCountryData.tests\n      const testsPerOneMillion = singleCountryData.testsPerOneMillion\n      const casesPerOneMillion = singleCountryData.casesPerOneMillion\n\n      const percentage = {\n        active: (active / confirmed) * 100,\n        recovered: (recovered / confirmed) * 100,\n        deaths: (deaths / confirmed) * 100,\n      }\n      const commaSepNo = (num) =>\n        num.toLocaleString('en', {\n          useGrouping: true,\n        })\n      return (\n        <Box borderWidth='1px' rounded='md' p='2%'>\n          <Box d='flex' alignItems='flex-start' flexDir='column'>\n            <Text color='gray.600' fontSize='xl' mb='1%' fontWeight='bold'>\n              {currentCountry}\n            </Text>\n            <Text color='gray.500' fontSize='md'>\n              Total Confirmed Cases\n            </Text>\n            <Text color='black' fontSize='2xl' mb='1%' fontWeight='semibold'>\n              {commaSepNo(confirmed)}\n            </Text>\n          </Box>\n          <Box d='flex' paddingX='2px'>\n            <Progress\n              color='blue'\n              size='sm'\n              value={100}\n              width={percentage.active + '%'}\n              roundedLeft='md'\n            />\n            <Progress\n              color='green'\n              size='sm'\n              value={100}\n              width={percentage.recovered + '%'}\n            />\n            <Progress\n              color='red'\n              size='sm'\n              value={100}\n              width={percentage.deaths + '%'}\n              roundedRight='md'\n            />\n          </Box>\n          <Box d='flex' flexDir='column' justifyContent='space-evenly'>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='blue' fontSize='0.8em'>\n                Active Cases\n              </Badge>\n              <Box d='flex' alignItems='center'>\n                <Icon name='triangle-up' color='blue.500' />\n                <Text color='gray.500' fontSize='md'>\n                  {commaSepNo(todayCases)}\n                </Text>\n              </Box>\n              <Text color='black' fontSize='md'>\n                {commaSepNo(active)}\n              </Text>\n            </Box>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='green' fontSize='0.8em'>\n                Recovered\n              </Badge>\n              <Text color='black' fontSize='md'>\n                {commaSepNo(recovered)}\n              </Text>\n            </Box>\n            <Box {...boxARDStyle}>\n              <Badge variant='solid' variantColor='red' fontSize='0.8em'>\n                Deaths\n              </Badge>\n\n              <Text color='black' fontSize='md'>\n                {commaSepNo(deaths)}\n              </Text>\n            </Box>\n          </Box>\n          <Box d='flex' fontSize='sm' mt='2px'>\n            Ratio of Recovery &nbsp;\n            <Text color='blue.500'>\n              {percentage.recovered.toFixed(2) + '%'}&nbsp;\n            </Text>\n            & Deaths &nbsp;\n            <Text color='blue.500'>{percentage.deaths.toFixed(2) + '%'}</Text>\n          </Box>\n          <Box d='flex' flexDir='column' fontSize='sm' mt='2px'>\n            <Box d='flex'>\n              <Box d='flex'>\n                Tests: &nbsp;\n                <Text color='blue.500'>{commaSepNo(tests)}&nbsp;</Text>\n              </Box>\n              <Box d='flex'>\n                Tests per Million: &nbsp;\n                <Text color='blue.500'>\n                  {commaSepNo(testsPerOneMillion)}&nbsp;\n                </Text>\n              </Box>\n            </Box>\n            <Box d='flex'>\n              Cases per Million: &nbsp;\n              <Text color='blue.500'>\n                {commaSepNo(casesPerOneMillion)}&nbsp;\n              </Text>\n            </Box>\n          </Box>\n        </Box>\n      )\n    }\n    return (\n      <Box d='flex' flexDir='column' w='100%'>\n        <Box d='flex' alignItems='center' justifyContent='center'>\n          <CountryList />\n        </Box>\n        <SingleCountry currentCountry={currentCountry} />\n      </Box>\n    )\n  }\n  const MapLeftDiv = (\n    <Box d='flex' flexDir='column' h='100%'>\n      {dataStateGlobal ? (\n        <Box width='100%' bg='#fff' paddingX='3%' pt='3%'>\n          <Global />\n          <Box d={['None', 'flex']}>\n            <CountryWise />\n          </Box>\n        </Box>\n      ) : (\n        FetchingData()\n      )}\n    </Box>\n  )\n  return MapLeftDiv\n}\n\nexport default DesktopVisualizerLeft\n","import {\n  Alert,\n  AlertIcon,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuDivider,\n  MenuOptionGroup,\n  MenuItemOption,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Text,\n  Box,\n} from '@chakra-ui/core'\nimport React, { useState, useEffect, Fragment } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actionTypes from '../redux/actions/actionTypes'\nimport moment from 'moment'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport axios from 'axios'\n\nconst CountryChart = () => {\n  const dispatch = useDispatch()\n  const visualizeData = useSelector((state) => {\n    return { ...state.visualizeData }\n  })\n  const countries = { ...visualizeData }\n  const [countryArr] = useState(Object.keys(countries).sort())\n  const singleCountryData = useSelector((state) => state.singleCountryData)\n\n  const [singleCountryPlot, setSingleCountryPlot] = useState({})\n  const currentCountry = singleCountryData.country\n  const currentType = singleCountryData.type\n  const dateDiff = singleCountryData.xaxisDateDiff\n  const CRD = singleCountryData.CRD\n  const scatterType = singleCountryData.scatterType\n  const [apply, setApply] = useState(false)\n  const modifySingleCountry = (term) => {\n    if (term === 'CRD') {\n      if (CRD.length) {\n        let update = false\n        const plot = {\n          data: [],\n          layout: {\n            title: currentCountry + ' ' + currentType + ' chart',\n            xaxis: {},\n          },\n          frames: [],\n          config: {},\n        }\n        const getKey = {\n          cases: 'confirmed',\n          deaths: 'deaths',\n          recovered: 'recovered',\n          active: 'active',\n          new_confirmed: 'new_confirmed',\n          new_deaths: 'new_deaths',\n          new_recovered: 'new_recovered',\n          date: 'date',\n        }\n        const colors = {\n          cases: '#E33427',\n          deaths: '#5A0924',\n          recovered: '#09D32C',\n          active: '#10AAC0',\n          new_confirmed: '#3E08E0',\n          new_deaths: '#78BBD9',\n          new_recovered: '#98AAC0',\n        }\n\n        if (['scatter', 'bar'].includes(currentType)) {\n          CRD.forEach((el) => {\n            console.log(countries[currentCountry], 'rooooooh')\n            const xaxisDate = countries[currentCountry]['timeline']['date']\n            const yAxisData = countries[currentCountry]['timeline'][getKey[el]]\n            const data = {\n              type: currentType,\n              x: xaxisDate,\n              y: yAxisData,\n              name: el,\n              marker: {\n                color: colors[el],\n              },\n            }\n\n            if (currentType === 'scatter') {\n              data['mode'] = scatterType[el] ? scatterType[el] : 'lines'\n            }\n            plot.layout.images = [\n              {\n                x: 0,\n                y: 0.9,\n              },\n            ]\n            plot.data.push(data)\n            update = true\n          })\n          plot.layout.title =\n            plot.layout.title + ' as on ' + moment().format('MMM Do YYYY')\n\n          plot.layout.xaxis = {\n            dtick: singleCountryData.xaxisDateDiff * 86400000,\n            automargin: true,\n            title: {\n              text: 'Timeline',\n              standoff: 5,\n            },\n            autorange: true,\n            rangeselector: {\n              buttons: [\n                {\n                  count: 1,\n                  label: '1m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                {\n                  count: 3,\n                  label: '3m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                {\n                  count: 6,\n                  label: '6m',\n                  step: 'month',\n                  stepmode: 'backward',\n                },\n                { step: 'all' },\n              ],\n            },\n            rangeslider: { range: [] },\n            type: 'date',\n          }\n        }\n        if (currentType === 'pie') {\n          const pieDateSingle = singleCountryData.pieDateSingle\n          if (CRD.length && pieDateSingle) {\n            const dateArr = countries[currentCountry]['timeline']['date']\n            const values = []\n            const labels = []\n            const markers = []\n            CRD.forEach((el) => {\n              const arr = countries[currentCountry]['timeline'][getKey[el]]\n              const dateIndex = dateArr.indexOf(pieDateSingle)\n              const val = pieDateSingle ? arr[dateIndex] : arr.pop()\n              values.push(val)\n              labels.push(el)\n              markers.push(colors[el])\n            })\n            const data = {\n              type: currentType,\n              values: values,\n              labels: labels,\n              marker: {\n                colors: markers,\n              },\n              texttemplate: '%{label}: %{value} (%{percent})',\n              textinfo: 'label+percent',\n              textposition: 'outside',\n              automargin: true,\n            }\n            plot.data.push(data)\n            plot.layout.title =\n              plot.layout.title +\n              ' as on ' +\n              (pieDateSingle ? pieDateSingle : dateArr.pop())\n            plot.layout.images = [\n              {\n                x: 0,\n                y: 0.2,\n              },\n            ]\n            update = true\n          }\n        }\n        if (update) setSingleCountryPlot(plot)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (singleCountryData.country && apply) {\n      dispatch({ type: actionTypes.SET_PLOT, payload: singleCountryPlot })\n      setApply(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [singleCountryPlot])\n\n  useEffect(() => {\n    if (currentCountry) {\n      selectCountry(currentCountry)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentCountry])\n\n  useEffect(() => {\n    modifySingleCountry('CRD')\n    setApply(true)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [singleCountryData])\n  const setScatter = (arg) => {\n    const arr = arg.split('-')\n    dispatch({\n      type: actionTypes.SET_singleCountry_scatterType,\n      payload: { ...scatterType, [arr[0]]: arr[1] },\n    })\n  }\n  const selectCountry = async (value) => {\n    const code = countries[value]['code']\n    async function fetchData() {\n      // const historical =\n      //   'https://corona.lmao.ninja/v3/covid-19/historical?lastdays=all'\n      // const corona_api = 'https://corona-api.com/countries?include=timeline'\n      const countries = `https://corona-api.com/countries/${code}`\n      try {\n        const api = countries\n        let response = await axios.get(api)\n        // console.log(response.data);\n        return response.data.data\n      } catch (e) {\n        console.log(`Failed to fetch country data: ${e.message}`, e)\n        return\n      }\n    }\n    const country_response = await fetchData().then((data) => data)\n    const dataByDate = {}\n    const dataByKey = {\n      confirmed: [],\n      deaths: [],\n      recovered: [],\n      active: [],\n      new_confirmed: [],\n      new_deaths: [],\n      new_recovered: [],\n      date: [],\n    }\n    country_response.timeline.forEach((obj) => {\n      dataByDate[obj.date] = { ...obj }\n      Object.keys(dataByKey).forEach((key) => {\n        dataByKey[key].unshift(obj[key])\n      })\n    })\n    const COUNTRY_DATA = {\n      [country_response.name]: {\n        code: country_response.code,\n        timeline: {\n          dataByDate: dataByDate,\n          date: Object.keys(dataByDate).reverse(),\n          ...dataByKey,\n        },\n      },\n    }\n    await dispatch({\n      type: actionTypes.SET_COUNTRY_DATA,\n      payload: COUNTRY_DATA,\n    })\n    await dispatch({\n      type: actionTypes.SET_singleCountry_dateRange,\n      payload: Object.keys(dataByDate).reverse(),\n    })\n    await dispatch({ type: actionTypes.SET_singleCountry, payload: value })\n  }\n  const optionsArray = ['Cases', 'Deaths', 'Recovered', 'Active']\n  return (\n    <>\n      <Menu closeOnSelect={true}>\n        <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n          {currentCountry || ' Select country'}\n        </MenuButton>\n        <MenuList\n          minWidth='240px'\n          maxHeight='70vh'\n          overflowY='scroll'\n          zIndex={2}\n        >\n          <MenuOptionGroup\n            title='Country'\n            type='radio'\n            onChange={(value) => {\n              selectCountry(value)\n            }}\n            defaultValue={currentCountry}\n          >\n            {countryArr.map((el) => {\n              return (\n                <MenuItemOption key={el} value={el}>\n                  {el}\n                </MenuItemOption>\n              )\n            })}\n          </MenuOptionGroup>\n        </MenuList>\n      </Menu>\n      {currentCountry ? (\n        <>\n          <Menu closeOnSelect={true}>\n            <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n              {currentType || 'Select type'}\n            </MenuButton>\n            <MenuList minWidth='240px'>\n              <MenuOptionGroup\n                title='type'\n                type='radio'\n                onChange={(value) =>\n                  dispatch({\n                    type: actionTypes.SET_singleCountry_type,\n                    payload: value,\n                  })\n                }\n                defaultValue={currentType}\n              >\n                {['Bar', 'Scatter', 'Pie'].map((el) => {\n                  return (\n                    <MenuItemOption\n                      key={el.toLowerCase()}\n                      value={el.toLowerCase()}\n                    >\n                      {el}\n                    </MenuItemOption>\n                  )\n                })}\n              </MenuOptionGroup>\n            </MenuList>\n          </Menu>\n          {currentType ? (\n            <>\n              <Menu closeOnSelect={false}>\n                <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n                  Add to graph\n                </MenuButton>\n                <MenuList minWidth='240px'>\n                  <MenuOptionGroup\n                    title='Select one or more'\n                    type='checkbox'\n                    onChange={(value) =>\n                      dispatch({\n                        type: actionTypes.SET_singleCountry_CRD,\n                        payload: value,\n                      })\n                    }\n                    defaultValue={CRD}\n                  >\n                    {optionsArray.map((el) => {\n                      return (\n                        <MenuItemOption\n                          key={el.toLowerCase()}\n                          value={el.toLowerCase()}\n                        >\n                          {el}\n                        </MenuItemOption>\n                      )\n                    })}\n                  </MenuOptionGroup>\n                </MenuList>\n              </Menu>\n              {currentType === 'scatter' && CRD.length ? (\n                <Menu closeOnSelect={false}>\n                  <MenuButton mt={2} as={Button} variantColor='blue' size='md'>\n                    Modes\n                  </MenuButton>\n                  <MenuList minWidth='240px' position='relative'>\n                    {optionsArray.map((el) => {\n                      const el_lowercase = el.toLowerCase()\n                      return CRD.includes(el_lowercase) ? (\n                        <Fragment key={el + 'modeFragment'}>\n                          <MenuOptionGroup\n                            key={el + 'modes'}\n                            title={el}\n                            type='radio'\n                            defaultValue={\n                              el_lowercase + '-' + scatterType[el_lowercase]\n                            }\n                            onChange={(value) => setScatter(value)}\n                          >\n                            <MenuItemOption\n                              key={el_lowercase + '-markers'}\n                              value={el_lowercase + '-markers'}\n                            >\n                              Markers\n                            </MenuItemOption>\n                            <MenuItemOption\n                              key={el_lowercase + '-lines'}\n                              value={el_lowercase + '-lines'}\n                            >\n                              Lines\n                            </MenuItemOption>\n                            <MenuItemOption\n                              key={el_lowercase + '-lines+markers'}\n                              value={el_lowercase + '-lines+markers'}\n                            >\n                              Lines + Markers\n                            </MenuItemOption>\n                          </MenuOptionGroup>\n                          <MenuDivider key={el + 'divider'} />\n                        </Fragment>\n                      ) : null\n                    })}\n                  </MenuList>\n                </Menu>\n              ) : null}\n              {['bar', 'scatter'].includes(currentType) && CRD.length ? (\n                <>\n                  <Text color='gray.500' mt={2}>\n                    Select spacing between date on xaxis\n                  </Text>\n                  <NumberInput\n                    mt={2}\n                    defaultValue={dateDiff}\n                    onChange={(value) =>\n                      dispatch({\n                        type: actionTypes.SET_singleCountry_xaxisDateDiff,\n                        payload: value,\n                      })\n                    }\n                  >\n                    <NumberInputField type='number' placeholder='Default' />{' '}\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </>\n              ) : null}\n              {currentType === 'pie' && CRD.length ? (\n                <>\n                  <Box mt={2}>\n                    {!singleCountryData.pieDateSingle ? (\n                      <Alert status='info'>\n                        <AlertIcon />\n                        Select a date below\n                      </Alert>\n                    ) : null}\n\n                    <Box border='2px'>\n                      <DatePicker\n                        {...(singleCountryData.pieDateSingle\n                          ? {\n                              selected: moment(\n                                singleCountryData.pieDateSingle,\n                                moment.defaultFormat\n                              ).toDate(),\n                            }\n                          : undefined)}\n                        dateFormat='dd/MM/yyyy'\n                        onChange={(date) =>\n                          dispatch({\n                            type: actionTypes.SET_singleCountry_pieDateSingle,\n                            payload: moment(date).format('YYYY-MM-DD'),\n                          })\n                        }\n                        minDate={moment(\n                          singleCountryData.dateRange[0],\n                          moment.defaultFormat\n                        ).toDate()}\n                        maxDate={moment(\n                          singleCountryData.dateRange[\n                            singleCountryData.dateRange.length - 1\n                          ],\n                          moment.defaultFormat\n                        ).toDate()}\n                        includeDates={singleCountryData.dateRange.map((el) =>\n                          moment(el, moment.defaultFormat).toDate()\n                        )}\n                        placeholderText='Select a date'\n                      />\n                    </Box>\n                  </Box>\n                </>\n              ) : null}\n            </>\n          ) : null}\n        </>\n      ) : null}\n    </>\n  )\n}\n\nexport default CountryChart\n","import {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  Button,\n  Select,\n  useDisclosure,\n  Box,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/core'\n\nimport React, { useState } from 'react'\nimport CountryChart from './singleCountryChart'\n\nconst DrawerOption = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  const [option, setoption] = useState('')\n\n  const switchOption = (value) => {\n    switch (value) {\n      case 'country-chart':\n        return (\n          <>\n            <CountryChart key='country-chart' />\n          </>\n        )\n      case 'compare-countries':\n        return (\n          <Alert status='info' mt={2}>\n            <AlertIcon />\n            Compare Countries feature is coming soon!\n          </Alert>\n        )\n      default:\n        return\n    }\n  }\n\n  return (\n    <>\n      <Button\n        ref={btnRef}\n        // pos='absolute'\n        // bottom='4%'\n        // left='1%'\n        variantColor='teal'\n        onClick={onOpen}\n        // zIndex={100}\n        data-tname='CreateChart'\n        key='menu-button'\n        leftIcon='edit'\n      >\n        Create\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement='left'\n        onClose={onClose}\n        isFullHeight={true}\n        key='drawer-content'\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>Create your chart</DrawerHeader>\n          <DrawerBody>\n            <Box\n              flexDirection='column'\n              display='flex'\n              alignItems='baseline'\n              justifyContent='space-between'\n            >\n              <Select\n                placeholder='Select option'\n                onChange={(e) => setoption(e.target.value)}\n                defaultValue={option}\n              >\n                <option value='country-chart'>Country Chart</option>\n                <option value='compare-countries'>Compare Countries</option>\n              </Select>\n              {switchOption(option)}\n            </Box>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant='outline' mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n\nexport default DrawerOption\n","import React, { useState } from 'react'\nimport './styles.css'\nimport Graph from './components/visualize'\nimport Maps from './components/Maps'\nimport DesktopVisualizerLeft from './components/desktopVisualizerLeft'\nimport DrawerOption from './components/drawer'\nimport { ThemeProvider, CSSReset, Box, Button } from '@chakra-ui/core'\n\nconst App = () => {\n  const [activeComp, setActiveComp] = useState('map')\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Box height='100vh'>\n        <Box d='flex' height='96%'>\n          <Box d='flex' width='100%' height='100%' flexDir={['column', 'row']}>\n            <Box\n              d='flex'\n              flexDir='column'\n              flexWrap='nowrap'\n              width={['100%', '100%', '100%', '25%']}\n              bg='#fff'\n            >\n              <Box d='flex' flexDir='column' h={['50%', '50%', '50%', '100%']}>\n                <Box\n                  textAlign='center'\n                  fontSize='2em'\n                  bg='blue.500'\n                  height='auto'\n                  color='white'\n                >\n                  Covid-19 Visualizer\n                </Box>\n                <Box>\n                  <DesktopVisualizerLeft active={activeComp} />\n                </Box>\n                <Box\n                  d='flex'\n                  mt='auto'\n                  height='auto'\n                  width='full'\n                  justifyContent='center'\n                >\n                  {activeComp === 'map' ? (\n                    <Box alignSelf='flex-end'>\n                      <Button\n                        data-tname='VisualizeButton'\n                        variantColor='pink'\n                        variant='solid'\n                        onClick={() => setActiveComp('graph')}\n                      >\n                        Visualize\n                      </Button>\n                    </Box>\n                  ) : (\n                    <Box\n                      w='100%'\n                      d='flex'\n                      alignItems='center'\n                      justifyContent='space-evenly'\n                    >\n                      <Box d={['None', 'initial']}>\n                        <DrawerOption key='drawer-option' />\n                      </Box>\n                      <Button\n                        data-tname='MapButton'\n                        variantColor='teal'\n                        variant='solid'\n                        onClick={() => setActiveComp('map')}\n                      >\n                        Map\n                      </Button>\n                      <Box d={['None', 'initial']}>\n                        <Button\n                          data-tname='DownloadButton'\n                          variantColor='teal'\n                          variant='solid'\n                          onClick={() =>\n                            document\n                              .querySelector('a[data-title=\"Download plot\"]')\n                              .click()\n                          }\n                        >\n                          Download\n                        </Button>\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n            </Box>\n            <Box width={['100%', '75%']} height='100%' bg='#fff'>\n              {activeComp === 'map' ? <Maps /> : <Graph />}\n            </Box>\n          </Box>\n        </Box>\n        <Box className='info-box'>\n          <Box width={{ md: 100 / 3 + '%' }}></Box>\n          <Box\n            width={{ md: 100 / 3 + '%' }}\n            display={{ md: 'flex' }}\n            justifyContent={{ md: 'center' }}\n          >\n            <a\n              data-tname='BuiltByCJ'\n              className='footnote'\n              href='https://devcj.in'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              Built By <span className='highlight'>CJ</span>\n            </a>\n          </Box>\n          <Box\n            width={{ md: 100 / 3 + '%' }}\n            display={{ md: 'flex' }}\n            justifyContent={{ md: 'flex-end' }}\n            style={{ color: '#fff' }}\n          >\n            <a\n              data-tname='ForkThisRepo'\n              href='https://github.com/dev-cj/visualize-corona'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              Fork this repo &nbsp;\n              <span className='highlight'>here &nbsp;</span>\n            </a>\n          </Box>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {}\n\nconst visualizeReducer = (state = initialState, action) => {\n  // console.log(state, action)\n  switch (action.type) {\n    case actionTypes.SET_DATA: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case actionTypes.SET_COUNTRY_DATA: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    default:\n      return state\n  }\n}\nexport default visualizeReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {\n  plotData: {\n    data: [\n      {\n        type: 'bar',\n        x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June'],\n        y: [2, 5, 6, 15, 4, 2],\n      },\n      {\n        type: 'bar',\n        x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June'],\n        y: [2, 5, 3, 2, 20, 7],\n      },\n    ],\n    layout: {\n      autosize: true,\n      title: '<b style=\"font-size:1.2em;\">A Sample Plot</b>',\n      barmode: 'group',\n      xaxis: {},\n    },\n    frames: [],\n    config: {},\n  },\n}\n\nconst plotReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_PLOT: {\n      return {\n        plotData: {\n          ...action.payload,\n          layout: {\n            ...action.payload.layout,\n            images: [\n              {\n                name: 'watermark_CJ',\n                source:\n                  'https://raw.githubusercontent.com/dev-cj/visualize-corona/master/src/watermark.png',\n                xref: 'paper',\n                yref: 'paper',\n                sizex: 0.3,\n                sizey: 0.3,\n                opacity: 0.3,\n                layer: 'below',\n                ...action.payload.layout.images[0],\n              },\n            ],\n          },\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\nexport default plotReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {\n  country: '',\n  type: '',\n  CRD: [],\n  scatterType: {},\n  pieDateType: 'single',\n  pieDateSingle: '',\n  xaxisDateDiff: 0,\n  dateRange: [],\n}\n\nconst singleCountryReducer = (state = initialState, action) => {\n  //   console.log(state, action)\n  switch (action.type) {\n    case actionTypes.SET_SingleCountryData: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry: {\n      return {\n        ...state,\n        country: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_type: {\n      return {\n        ...state,\n        type: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_CRD: {\n      return {\n        ...state,\n        CRD: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_scatterType: {\n      return {\n        ...state,\n        scatterType: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_pieDateSingle: {\n      return {\n        ...state,\n        pieDateSingle: action.payload,\n      }\n    }\n    case actionTypes.SET_singleCountry_dateRange: {\n      return {\n        ...state,\n        dateRange: action.payload,\n      }\n    }\n\n    case actionTypes.SET_singleCountry_xaxisDateDiff: {\n      return {\n        ...state,\n        xaxisDateDiff: action.payload,\n      }\n    }\n    default:\n      return state\n  }\n}\nexport default singleCountryReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = {}\n\nconst mapDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_MAP_DATA: {\n      return action.payload\n    }\n\n    default:\n      return state\n  }\n}\nexport default mapDataReducer\n","import * as actionTypes from '../actions/actionTypes'\n\nexport const initialState = { timeline: {}, countries: {} }\n\nconst statsDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_STATS_TIMELINE: {\n      return { ...state, timeline: { ...action.payload } }\n    }\n    case actionTypes.SET_STATS_COUNTRIES: {\n      return { ...state, countries: { ...action.payload } }\n    }\n    default:\n      return state\n  }\n}\nexport default statsDataReducer\n","import { combineReducers } from 'redux'\nimport visualizeReducer from './visualizeReducer'\nimport plotReducer from './plotReducer'\nimport singleCountryReducer from './singleCountryReducer'\nimport mapDataReducer from './mapDataReducer'\nimport statsDataReducer from './statsDataReducer'\nexport default combineReducers({\n  visualizeData: visualizeReducer,\n  plotReducer,\n  singleCountryData: singleCountryReducer,\n  mapData: mapDataReducer,\n  stats: statsDataReducer,\n})\n","import { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducer/'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst middleWare = [thunk]\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(...middleWare))\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}